<%@ jet package="org.openanzo.rdf.jastor.templates"
		skeleton="ontology.skeleton"
		class="FactoryTemplate"
		imports="org.openanzo.rdf.jastor.* org.openanzo.rdf.jastor.inference.* org.openanzo.rdf.jastor.jet.*" %>
<% Ontology pkg = ont; %>
<% String pkgstr = pkg.getPackage(); %>
<% JastorContext ctx = pkg.getContext(); %>
<% if(ctx.isIncludeCopyright()){%>
/*******************************************************************************
 * Copyright (c) 2004, 2007-2008 IBM Corporation and Cambridge Semantics Incorporated.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * File:        <%="$".toString()%>Source<%="$".toString()%>
 * Created by:  Generated Source from org.openanzo.jdbc.utils.opgen.jet
 * Created on:  Generated Source from org.openanzo.jdbc.utils.opgen.jet
 * Revision:	<%="$".toString()%>Id<%="$".toString()%>
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *	   Cambridge Semantics Incorporated - Fork to Anzo
 *******************************************************************************/
 <%}%>

package <%=pkgstr%>;

/**
 * Factory for instantiating objects for ontology classes in the <%=pkg.getLocalName()%> ontology.  The
 * get methods leave the dataset unchanged and return a Java view of the object in the dataset.  The create methods
 * may add certain baseline properties to the dataset such as rdf:type and any properties with hasValue restrictions.
 * <p>(URI: <%=ctx.remapUri(pkg.getURI()) %>)</p>
 * <br>
<% if (pkg.getComment().listRDFSPropertyNames().length > 0) { %>
 * RDF Schema Standard Properties <br>
<% 	String[] names = pkg.getComment().listRDFSPropertyNames(); %>
<% 	for (int i=0;i<names.length;i++) { %>
 * 	<%=names[i] + " : " + pkg.getComment().getRDFSProperty(names[i])%> <br>
<% 	} %>
<% } %>
 * <br>
<% if (pkg.getComment().listDCPropertyNames().length > 0) { %>
 * Dublin Core Standard Properties <br>
<% 	String[] names = pkg.getComment().listDCPropertyNames(); %>
<% 	for (int i=0;i<names.length;i++) { %>
 * 	<%=names[i] + " : " + pkg.getComment().getDCProperty(names[i])%> <br>
<% 	} %>
<% } %>
 * <br>
<% if (pkg.getComment().getVersionInfo() != null) { %>
 *	@version <%=pkg.getComment().getVersionInfo()%>
<% } %>
 */
public class <%=pkg.getFactoryClassname()%> extends <%=ctx.getThingFactory().getName()%> { 


<% for(OntologyClass oc : pkg.getClasses()) {%>
<%if(oc.listProperties(true).size()>0){%>
	/**
	 *Determine if the given predicate is one of the properties for the given class 
	 *@param predicate predicate to check
	 *@return true if the given predicate is one of the properties for the given class
	 */
	public static boolean is<%=oc.getInterfaceClassname()%>Predicate(org.openanzo.rdf.URI predicate){
		return <% for (java.util.Iterator<OntologyProperty> iter= oc.listProperties(true).iterator();iter.hasNext();) {%>
			predicate.equals(<%=oc.getImplClassname()%>.<%=iter.next().getPropertyName()%>Property) <%if (iter.hasNext()){%>||<%}%><% } %>;
	}
<%}%>
	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Adds the rdf:type property for the given resource to the dataset.
	 * @param resource The resource of the <%=oc.getInterfaceClassname()%>
	 * @param _namedGraphUri the URI of the NamedGraph within the dataset where this object is to be created
	 * @param dataset the IDataset containing the data
	 * @return the newly created <%=oc.getInterfaceClassname()%>
	 * @throws org.openanzo.rdf.jastor.JastorException
	 */
	public static <%=oc.getInterfaceClassname()%> create<%=oc.getInterfaceClassname()%>(org.openanzo.rdf.Resource resource,org.openanzo.rdf.URI _namedGraphUri, org.openanzo.rdf.IDataset dataset) throws org.openanzo.rdf.jastor.JastorException {
		<%=oc.getInterfaceClassname()%> result= <%=oc.getImplFullClassname()%>.create<%=oc.getInterfaceClassname()%>(resource,_namedGraphUri,dataset);
		<% if (ctx.isGenerateCacheInFactory()) { %>
		String code = (dataset.hashCode()*17 + <%=oc.getInterfaceFullClassname()%>.class.hashCode()+((_namedGraphUri!=null)?_namedGraphUri.hashCode():0)) + resource.toString();
		objects.put(code, result);			
		<% } %>
		return result;
	}

	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Adds the rdf:type property for the given resource to the dataset.
	 * @param resource The resource of the <%=oc.getInterfaceClassname()%>
	 * @param dataset the IDataset containing the data
	 * @return the newly created <%=oc.getInterfaceClassname()%>
	 * @throws org.openanzo.rdf.jastor.JastorException
	 */
	public static <%=oc.getInterfaceClassname()%> create<%=oc.getInterfaceClassname()%>(org.openanzo.rdf.URI resource, org.openanzo.rdf.IDataset dataset) throws org.openanzo.rdf.jastor.JastorException {
		return create<%=oc.getInterfaceClassname()%>(resource, resource, dataset);
	}
	
	
	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Adds the rdf:type property for the given resource to the dataset.
	 * @param uri The uri of the <%=oc.getInterfaceClassname()%>
	 * @param dataset the IDataset containing the data
	 * @return the newly created <%=oc.getInterfaceClassname()%>
	 * @throws org.openanzo.rdf.jastor.JastorException
	 */
	public static <%=oc.getInterfaceClassname()%> create<%=oc.getInterfaceClassname()%>(String uri, org.openanzo.rdf.IDataset dataset) throws org.openanzo.rdf.jastor.JastorException {
		org.openanzo.rdf.URI resource=org.openanzo.rdf.jastor.ThingFactory.valueFactory.createURI(uri);
		return create<%=oc.getInterfaceClassname()%>(resource, resource, dataset);
	}
	
	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Adds the rdf:type property for the given resource to the dataset.
	 * @param uri The uri of the <%=oc.getInterfaceClassname()%>
	 * @param _namedGraphUri the URI of the NamedGraph within the dataset where this object is to be created
	 * @param dataset the IDataset containing the data
	 * @return the newly created <%=oc.getInterfaceClassname()%>
	 * @throws org.openanzo.rdf.jastor.JastorException
	 */
	public static <%=oc.getInterfaceClassname()%> create<%=oc.getInterfaceClassname()%>(String uri, org.openanzo.rdf.URI _namedGraphUri,org.openanzo.rdf.IDataset dataset) throws org.openanzo.rdf.jastor.JastorException {
		org.openanzo.rdf.URI resource=org.openanzo.rdf.jastor.ThingFactory.valueFactory.createURI(uri);
		return create<%=oc.getInterfaceClassname()%>(resource, _namedGraphUri, dataset);
	}
	
	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Adds the rdf:type property for the given resource to the dataset.
	 * @param resource The resource of the <%=oc.getInterfaceClassname()%>
	 * @param graph the NamedGraph within the dataset where this object is to be created
	 * @return the newly created <%=oc.getInterfaceClassname()%>
	 * @throws org.openanzo.rdf.jastor.JastorException
	 */
	public static <%=oc.getInterfaceClassname()%> create<%=oc.getInterfaceClassname()%>(org.openanzo.rdf.Resource resource, org.openanzo.rdf.INamedGraph graph) throws org.openanzo.rdf.jastor.JastorException {
		org.openanzo.rdf.IDataset dataset = org.openanzo.rdf.jastor.SingletonDataset.getInstance(graph);
		return create<%=oc.getInterfaceClassname()%>(resource, graph.getNamedGraphUri(), dataset);
	}
	
	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Adds the rdf:type property for the given resource to the dataset.
	 * @param uri The uri of the <%=oc.getInterfaceClassname()%>
	 * @param graph the NamedGraph within the dataset where this object is to be created
	 * @return the newly created <%=oc.getInterfaceClassname()%>
	 * @throws org.openanzo.rdf.jastor.JastorException
	 */
	public static <%=oc.getInterfaceClassname()%> create<%=oc.getInterfaceClassname()%>(String uri, org.openanzo.rdf.INamedGraph graph) throws org.openanzo.rdf.jastor.JastorException {
		org.openanzo.rdf.URI resource=org.openanzo.rdf.jastor.ThingFactory.valueFactory.createURI(uri);
		return create<%=oc.getInterfaceClassname()%>(resource, graph);
	}
	
	
	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Leaves the dataset unchanged.
	 * @param resource The resource of the <%=oc.getInterfaceClassname()%>
	 * @param _namedGraphUri the URI of the NamedGraph within the dataset where this object is to be created
	 * @param dataset the IDataset containing the data
	 * @return the newly created <%=oc.getInterfaceClassname()%>
	 * @throws org.openanzo.rdf.jastor.JastorException
	 */
	public static <%=oc.getInterfaceClassname()%> get<%=oc.getInterfaceClassname()%>(org.openanzo.rdf.Resource resource, org.openanzo.rdf.URI _namedGraphUri,org.openanzo.rdf.IDataset dataset) throws org.openanzo.rdf.jastor.JastorException {
<% 	if (ctx.isGenerateCacheInFactory()) { %>
		String code = (dataset.hashCode()*17 + <%=oc.getInterfaceFullClassname()%>.class.hashCode()+((_namedGraphUri!=null)?_namedGraphUri.hashCode():0)) + resource.toString();
		<%=oc.getImplFullClassname()%> obj = (<%=oc.getImplFullClassname()%>)objects.get(code);
		if (obj == null) {
			obj = <%=oc.getImplFullClassname()%>.get<%=oc.getInterfaceClassname()%>(resource,_namedGraphUri, dataset);
			if (obj == null)
				return null;
			objects.put(code, obj);
		}
		return obj;
<% 	} else { %>
		return <%=oc.getImplFullClassname()%>.get<%=oc.getInterfaceClassname()%>(resource, _namedGraphUri,dataset);
<% 	} %>
	}	
	
	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Adds the rdf:type property for the given resource to the dataset.
	 * @param resource The resource of the <%=oc.getInterfaceClassname()%>
	 * @param dataset the IDataset containing the data
	 * @return the newly created <%=oc.getInterfaceClassname()%>
	 * @throws org.openanzo.rdf.jastor.JastorException
	 */
	public static <%=oc.getInterfaceClassname()%> get<%=oc.getInterfaceClassname()%>(org.openanzo.rdf.URI resource, org.openanzo.rdf.IDataset dataset) throws org.openanzo.rdf.jastor.JastorException {
		return get<%=oc.getInterfaceClassname()%>(resource, resource, dataset);
	}
	
	
	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Adds the rdf:type property for the given resource to the dataset.
	 * @param uri The uri of the <%=oc.getInterfaceClassname()%>
	 * @param dataset the IDataset containing the data
	 * @return the newly created <%=oc.getInterfaceClassname()%>
	 * @throws org.openanzo.rdf.jastor.JastorException
	 */
	public static <%=oc.getInterfaceClassname()%> get<%=oc.getInterfaceClassname()%>(String uri, org.openanzo.rdf.IDataset dataset) throws org.openanzo.rdf.jastor.JastorException {
		org.openanzo.rdf.URI resource=org.openanzo.rdf.jastor.ThingFactory.valueFactory.createURI(uri);
		return get<%=oc.getInterfaceClassname()%>(resource, resource, dataset);
	}
	
	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Adds the rdf:type property for the given resource to the dataset.
	 * @param uri The uri of the <%=oc.getInterfaceClassname()%>
	 * @param _namedGraphUri the URI of the NamedGraph within the dataset where this object is to be created
	 * @param dataset the IDataset containing the data
	 * @return the newly created <%=oc.getInterfaceClassname()%>
	 * @throws org.openanzo.rdf.jastor.JastorException
	 */
	public static <%=oc.getInterfaceClassname()%> get<%=oc.getInterfaceClassname()%>(String uri, org.openanzo.rdf.URI _namedGraphUri,org.openanzo.rdf.IDataset dataset) throws org.openanzo.rdf.jastor.JastorException {
		org.openanzo.rdf.URI resource=org.openanzo.rdf.jastor.ThingFactory.valueFactory.createURI(uri);
		return get<%=oc.getInterfaceClassname()%>(resource, _namedGraphUri, dataset);
	}
	
	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Adds the rdf:type property for the given resource to the dataset.
	 * @param resource The resource of the <%=oc.getInterfaceClassname()%>
	 * @param graph  the NamedGraph within the dataset where this object is to be created
	 * @return the newly created <%=oc.getInterfaceClassname()%>
	 * @throws org.openanzo.rdf.jastor.JastorException
	 */
	public static <%=oc.getInterfaceClassname()%> get<%=oc.getInterfaceClassname()%>(org.openanzo.rdf.Resource resource, org.openanzo.rdf.INamedGraph graph) throws org.openanzo.rdf.jastor.JastorException {
		org.openanzo.rdf.IDataset dataset = org.openanzo.rdf.jastor.SingletonDataset.getInstance(graph);
		return get<%=oc.getInterfaceClassname()%>(resource, graph.getNamedGraphUri(), dataset);
	}
	
	/**
	 * Create a new instance of <%=oc.getInterfaceClassname()%>.  Adds the rdf:type property for the given resource to the dataset.
	 * @param uri The uri of the <%=oc.getInterfaceClassname()%>
	 * @param graph the NamedGraph within the dataset where this object is to be created
	 * @return the newly created <%=oc.getInterfaceClassname()%>
	 * @throws org.openanzo.rdf.jastor.JastorException
	 */
	public static <%=oc.getInterfaceClassname()%> get<%=oc.getInterfaceClassname()%>(String uri, org.openanzo.rdf.INamedGraph graph) throws org.openanzo.rdf.jastor.JastorException {
		org.openanzo.rdf.URI resource=org.openanzo.rdf.jastor.ThingFactory.valueFactory.createURI(uri);
		return get<%=oc.getInterfaceClassname()%>(resource, graph);
	}
	
	/**
	 * Return an instance of <%=oc.getInterfaceClassname()%> for every resource in the dataset with rdf:Type <%=ctx.remapUri(oc.getURI())%>
	 * @param _namedGraphUri the URI of the NamedGraph
	 * @param dataset the IDataset containing the data
	 * @return a List of <%=oc.getInterfaceClassname()%>
	 * @throws org.openanzo.rdf.jastor.JastorException
	 */
	public static java.util.List<<%=oc.getInterfaceClassname()%>> getAll<%=oc.getInterfaceClassname()%>(org.openanzo.rdf.URI _namedGraphUri,org.openanzo.rdf.IDataset dataset) throws org.openanzo.rdf.jastor.JastorException {
		java.util.Collection<org.openanzo.rdf.Statement> result = dataset.find(null,org.openanzo.rdf.vocabulary.RDF.TYPE,<%=oc.getInterfaceClassname()%>.TYPE,_namedGraphUri);
		java.util.List<<%=oc.getInterfaceClassname()%>> list = new java.util.ArrayList<<%=oc.getInterfaceClassname()%>>();
		for(org.openanzo.rdf.Statement stmt :result){
			org.openanzo.rdf.URI nguri = _namedGraphUri != null ? _namedGraphUri : (org.openanzo.rdf.URI)stmt.getSubject();
			list.add(get<%=oc.getInterfaceClassname()%>(stmt.getSubject(),nguri,dataset));
		}
		return list;
	}
	
	/**
	 * Return an instance of <%=oc.getInterfaceClassname()%> for every resource in the dataset with rdf:Type <%=ctx.remapUri(oc.getURI())%>
	 * @param dataset the IDataset containing the data
	 * @return a List of <%=oc.getInterfaceClassname()%>
	 * @throws org.openanzo.rdf.jastor.JastorException
	 */
	public static java.util.List<<%=oc.getInterfaceClassname()%>> getAll<%=oc.getInterfaceClassname()%>(org.openanzo.rdf.IDataset dataset) throws org.openanzo.rdf.jastor.JastorException {
		return getAll<%=oc.getInterfaceClassname()%>(null, dataset);
	}
	
	/**
	 * Return an instance of <%=oc.getInterfaceClassname()%> for every resource in the dataset with rdf:Type <%=ctx.remapUri(oc.getURI())%>
	 * @param graph the NamedGraph containing the data
	 * @return a List of <%=oc.getInterfaceClassname()%>
	 * @throws org.openanzo.rdf.jastor.JastorException
	 */
	public static java.util.List<<%=oc.getInterfaceClassname()%>> getAll<%=oc.getInterfaceClassname()%>(org.openanzo.rdf.INamedGraph graph) throws org.openanzo.rdf.jastor.JastorException {
		org.openanzo.rdf.IDataset dataset = org.openanzo.rdf.jastor.SingletonDataset.getInstance(graph);
		return getAll<%=oc.getInterfaceClassname()%>(graph.getNamedGraphUri(), dataset);
	}


<% } %>

	/**
	 * Returns an instance of an interface for the given Resource.  The return instance is guaranteed to 
	 * implement the most specific interface in *some* hierarchy in which the Resource participates.  The behavior
	 * is unspecified for resources with RDF types from different hierarchies.
	 * @return an instance of Thing
	 * @throws org.openanzo.rdf.jastor.JastorException 
	 */
	public static org.openanzo.rdf.jastor.Thing getThing(org.openanzo.rdf.Resource resource, org.openanzo.rdf.URI namedGraphUri, org.openanzo.rdf.IDataset dataset) throws org.openanzo.rdf.jastor.JastorException {
<% for(org.openanzo.rdf.jastor.inference.OntologyClass oc:ont.getClassesSorted()) {%>
		if (dataset.contains(resource,org.openanzo.rdf.vocabulary.RDF.TYPE, org.openanzo.rdf.MemURI.create("<%=oc.getURI()%>"), namedGraphUri)) {
			return get<%=oc.getInterfaceClassname()%>(resource, namedGraphUri, dataset);
		}
<% } %>
		return new org.openanzo.rdf.jastor.ThingImpl(resource, namedGraphUri, dataset);
	}
	/*
	public static org.openanzo.rdf.jastor.Thing getThing(org.openanzo.rdf.URI resource, org.openanzo.rdf.IDataset dataset) throws org.openanzo.rdf.jastor.JastorException {
		return getThing(resource, resource, dataset);
	}
	
	public static org.openanzo.rdf.jastor.Thing getThing(String uri, org.openanzo.rdf.URI namedGraphUri, org.openanzo.rdf.IDataset dataset) throws org.openanzo.rdf.jastor.JastorException {
		org.openanzo.rdf.URI resource=org.openanzo.rdf.jastor.ThingFactory.valueFactory.createURI(uri);
		return getThing(resource, namedGraphUri, dataset);
	}
	
	public static org.openanzo.rdf.jastor.Thing getThing(String uri, org.openanzo.rdf.IDataset dataset) throws org.openanzo.rdf.jastor.JastorException {
		org.openanzo.rdf.URI resource=org.openanzo.rdf.jastor.ThingFactory.valueFactory.createURI(uri);
		return getThing(resource, dataset);
	}
	
	public static org.openanzo.rdf.jastor.Thing getThing(org.openanzo.rdf.Resource resource, org.openanzo.rdf.INamedGraph graph) throws org.openanzo.rdf.jastor.JastorException {
		org.openanzo.rdf.IDataset dataset = org.openanzo.rdf.jastor.SingletonDataset.getInstance(graph);
		return getThing(resource, graph.getNamedGraphUri(), dataset);
	}
	
	public static org.openanzo.rdf.jastor.Thing getThing(org.openanzo.rdf.URI resource, org.openanzo.rdf.INamedGraph graph) throws org.openanzo.rdf.jastor.JastorException {
		org.openanzo.rdf.IDataset dataset = org.openanzo.rdf.jastor.SingletonDataset.getInstance(graph);
		return getThing(resource, graph.getNamedGraphUri(), dataset);
	}
	
	public static org.openanzo.rdf.jastor.Thing getThing(String uri, org.openanzo.rdf.INamedGraph graph) throws org.openanzo.rdf.jastor.JastorException {
		org.openanzo.rdf.URI resource=org.openanzo.rdf.jastor.ThingFactory.valueFactory.createURI(uri);
		return getThing(resource, graph);
	}
	*/
	/**
	 * Return a list of compatible interfaces for the given type.  Searches through all ontology classes
	 * in the <%=pkg.getLocalName()%> ontology.
	 * @param type the type for which to find compatible interfaces
	 * @return a List of type java.lang.Class
	 */
	public static java.util.List<java.lang.Class<? extends org.openanzo.rdf.jastor.Thing>> listCompatibleInterfaces (org.openanzo.rdf.Resource type) {
		java.util.List<java.lang.Class<? extends org.openanzo.rdf.jastor.Thing>> types = new java.util.ArrayList<java.lang.Class<? extends org.openanzo.rdf.jastor.Thing>>();
<% for(OntologyClass oc: pkg.getClasses()) {%>
		if (type.equals(<%=oc.getInterfaceFullClassname()%>.TYPE)) {
			types.add(<%=oc.getInterfaceFullClassname()%>.class);
		}
<% } %>
		return types;
	}
}