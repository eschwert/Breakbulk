<%@ jet
		skeleton="generator.skeleton"
		package="org.openanzo.jdbc.opgen.jet"
		class="RdbStatementWrapperTemplate"
		imports="java.util.* org.openanzo.jdbc.opgen.RdbStatement org.openanzo.jdbc.opgen.Result org.openanzo.jdbc.opgen.RdbStatementSet org.openanzo.jdbc.opgen.RdbStatement.Parameter" %>
<% RdbStatementSet.Context ctx = (RdbStatementSet.Context)argument; %>
<% List<RdbStatement> list = ctx.getDescriptorList().getList(); %>
/*******************************************************************************
 * Copyright (c) 2004, 2007-2009 IBM Corporation and Cambridge Semantics Incorporated.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Created by:  Generated Source from org.openanzo.jdbc.utils.opgen.jet
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *	   Cambridge Semantics Incorporated - Fork to Anzo
 *******************************************************************************/
package <%=ctx.getPackageName() %>;
// allow for all types that can be returned from a resultset

/**
 *	<%=ctx.getClassName() %> provides wrappers around SQL queries and transforms ResultSets into java objects
 *
 *	@author Generated Source from org.openanzo.jdbc.utils.opgen.jet
 */
public class <%=ctx.getClassName() %> {
	private static final org.slf4j.Logger                           log                   = org.slf4j.LoggerFactory.getLogger(<%=ctx.getClassName() %>.class);
	static final long CUTOFF=5;
<% for (RdbStatement ps : list) { %>

	/**
	  *Constant "<%=ps.getName()%>" used to reference prepared statement  <%=ps.getQualifiedName()%>
	  *
	  * <code>
	  * <%=ps.getSql().replaceAll("\n", " ")%>
	  * </code>
	  */
	public static final String <%=ps.getName()%> = "<%=ps.getQualifiedName()%>";
<% } %>

<% for (RdbStatement ps : list) { %>
<% 		List<Parameter> inputs = ps.getInputs(); %>
<% 		List<Parameter> outputs = ps.getOutputs(); %>
<% 		Result result = ps.getResults(); %>
<%		boolean prepare = ps.getPrepare(); %>

<% /*		if (ps.hasInputParamType()) {%>
	/**
	 * Runs the <%=ps.getName()%> prepared statement.
	 * <code>
	 * <%=ps.getSql().replaceAll("\n", " ")%>
	 * </code>
	 *
	 *@param stmtProvider
	 *			factory and cache of PreparedStatments
	 *@param connection
	 * 			connection to underlying database
	 *@param params
	 *			<%=ps.getInputParamInterface()%> input Interface
	 *<%if(ps.hasTemplateParams()){%><%=ps.getTemplateParamsJavadoc()%><%}%>
	 *<%if(!ps.getReturnType().equals("void")){%>@return  <%=ps.getReturnType()%> containing the results of the SQL operation<%}%>
	 *<% if(!ctx.getRethrowSQLException()) {%>@throws  <%=ctx.getRethrowExceptionName()%><%}else{%>@throws java.sql.SQLException<%}%>
	 */
	public static <%=ps.getReturnType()%><%if (result == Result.ITERATOR){ %><<%if(outputs.size() == 1){%><%=ps.getValueReturnType(true)%><%}else{%><%=ps.getResultsInterface()%><%}%>><%}%> <%=ps.getName()%> (org.openanzo.jdbc.utils.PreparedStatementProvider stmtProvider,java.sql.Connection connection, <%=ps.getInputParamInterface()%> params<%if(ps.hasTemplateParams()){%>, <%=ps.getTemplateParamSigniture()%><%}%>) throws <%=ctx.getRethrowExceptionName()%><% if(ctx.getRethrowSQLException()) {%>,java.sql.SQLException<%}%> {
		<%if (ps.hasReturn()) {%>return <%}%><%=ps.getName()%> (
				stmtProvider,connection <%if(inputs.size() > 0) { %>, <%}%>
<% 			for (Iterator<RdbStatement.Parameter> inIter = inputs.iterator(); inIter.hasNext();) {%>
<%          Parameter param = inIter.next(); %>
				params.get<%=param.getRdbProperty()%>()<%if(inIter.hasNext()) {%>,<% } %>
<% 			} %>
				<%if(ps.hasTemplateParams()) {%>, <%=ps.getTemplateParams()%><%}%>
		);
	}
<% } */%>

<% if(result == Result.ITERATOR) { %>
	/**
	 * Transformer that transforms the rows in the result set for the <%=ps.getName()%> prepared statement.
	 */
	static final org.openanzo.jdbc.utils.Transformer<<%if(outputs.size() == 1){%><%=ps.getValueReturnType(true)%><%}else{%><%=ps.getResultsInterface()%><%}%>> transform<%=ps.capitalizedName()%> = new org.openanzo.jdbc.utils.Transformer<<%if(outputs.size() == 1){%><%=ps.getValueReturnType(true)%><%}else{%><%=ps.getResultsInterface()%><%}%>>(){
<% 		if (outputs.size() == 1) { %>
		public <%=ps.getValueReturnType(true)%> transform(java.sql.ResultSet rs) {
			try {
				<%=ps.getJavaType(true)%> val = rs.get<%=ps.getResultSetProperty()%>(1);
				return val;
			} catch (java.sql.SQLException e) {
				log.error(org.openanzo.exceptions.LogUtils.RDB_MARKER,"Error transforming result set value:<%=ps.getResultSetProperty()%>",e);
				throw new org.apache.commons.collections.FunctorException(e);
			}
			}
<% 		} else { %>
		public <%=ps.getResultsInterface()%> transform(java.sql.ResultSet rs) {

			
				<%=ps.getResultsInterface()%> result = new <%=ps.getResultsInterface()%>();
<%			int i = 1; %>
<% 			for (Parameter param : outputs) {%>
				try {
				result.<%=param.getName()%>=rs.get<%=param.getResultSetProperty()%>(<%=i++%>);
				} catch (java.sql.SQLException e) {
				log.error(org.openanzo.exceptions.LogUtils.RDB_MARKER,"Error transforming result set param:<%=param.getName()%>",e);
				throw new org.apache.commons.collections.FunctorException(e);
				}
<% 			} %>
				return result;
			
		}
<% 		} %>

	};
<% } %>
<% /*if (result == Result.ITERATOR){ %>
	/**
	 * Runs the <%=ps.getName()%> prepared statement with the default transformer.
	  * <code>
	 * <%=ps.getSql().replaceAll("\n", " ")%>
	 * </code>
	 *
	 *@param stmtProvider
	 *			factory and cache of PreparedStatments
	 *@param connection
	 * 			connection to underlying database
	 *<%if(ps.hasInputParams()){%><%=ps.getInputParamsJavadoc()%><%}%>
	 *<%if(ps.hasTemplateParams()){%><%=ps.getTemplateParamsJavadoc()%><%}%>
	 *<%if(!ps.getReturnType().equals("void")){%>@return  <%=ps.getReturnType()%><%}%>
	 *<% if(!ctx.getRethrowSQLException()) {%>@throws  <%=ctx.getRethrowExceptionName()%><%}else{%>@throws java.sql.SQLException<%}%>
	 */
	 public static <%=ps.getReturnType()%><%if (result == Result.ITERATOR){ %><<%if(outputs.size() == 1){%><%=ps.getValueReturnType(true)%><%}else{%><%=ps.getResultsInterface()%><%}%>><%}%> <%=ps.getName()%> (final org.openanzo.jdbc.utils.PreparedStatementProvider stmtProvider,final java.sql.Connection connection<%if(ps.hasInputParams()) { %>, <%=ps.getInputParamSigniture()%><%}%><%if(ps.hasTemplateParams()){%>, <%=ps.getTemplateParamSigniture()%><%}%><%if (result == Result.ROW){%>, <%=ps.getResultsInterface()%> result<%}%>) throws <%=ctx.getRethrowExceptionName()%><% if(ctx.getRethrowSQLException()) {%>,java.sql.SQLException<%}%> {
		return <%=ps.getName()%> (stmtProvider,connection<%if(ps.hasInputParams()) { %>, <%=ps.getInputParams()%><%}%><%if(ps.hasTemplateParams()){%>, <%=ps.getTemplateParams()%><%}%><%if (result == Result.ROW){%>, result<%}%>, transform<%=ps.capitalizedName()%>);
	}
<% }*/%>
	
	/**
	 * Runs the <%=ps.getName()%> prepared statement.
	  * <code>
	 * <%=ps.getSql().replaceAll("\n", " ")%>
	 * </code>
	 *
	 *@param stmtProvider
	 *			factory and cache of PreparedStatments
	 *@param connection
	 * 			connection to underlying database
	 *<%if(ps.hasInputParams()){%><%=ps.getInputParamsJavadoc()%><%}%>
	 *<%if(ps.hasTemplateParams()){%><%=ps.getTemplateParamsJavadoc()%><%}%>
	 *<%if(!ps.getReturnType().equals("void")){%>@return  <%=ps.getReturnType()%><%}%>
	 *<% if(!ctx.getRethrowSQLException()) {%>@throws  <%=ctx.getRethrowExceptionName()%><%}else{%>@throws java.sql.SQLException<%}%>
	 */
	public static <%=ps.getReturnType()%><%if (result == Result.ITERATOR){ %><<%if(outputs.size() == 1){%><%=ps.getValueReturnType(true)%><%}else{%><%=ps.getResultsInterface()%><%}%>><%}%> <%=ps.getName()%> (final org.openanzo.jdbc.utils.PreparedStatementProvider stmtProvider,final java.sql.Connection connection<%if(ps.hasInputParams()) { %>, <%=ps.getInputParamSigniture()%><%}%><%if(ps.hasTemplateParams()){%>, <%=ps.getTemplateParamSigniture()%><%}%>) throws <%=ctx.getRethrowExceptionName()%><% if(ctx.getRethrowSQLException()) {%>,java.sql.SQLException<%}%>{
<%if(prepare){%>
		java.sql.PreparedStatement ps = null;
		//long startTimer=System.currentTimeMillis();
		try {
<%if (result != Result.IDENTITY) {%>		
			ps = stmtProvider.getPreparedSQLStatement(<%=ps.getName()%>, new String[] {<%=ps.getTemplateParams()%>},connection);
<%}else{%>			
			ps = stmtProvider.getPreparedSQLStatementWithGeneratedIDS(<%=ps.getName()%>, new String[] {<%=ps.getTemplateParams()%>},connection);
<%}%>
<%if(ps.hasInputParams()){%> int argc = 1;<%}%>
<% for (Parameter param : inputs) { %>
<%if(!param.isPrimitive()){%>
			if(<%=param.getName()%> == null) {
<%if(!param.canBeNull()){%>
				throw new org.openanzo.jdbc.utils.RdbException(org.openanzo.exceptions.ExceptionConstants.RDB.NULL_PARAMETER,"<%=param.getName()%>","<%=ps.getName()%>");
<%}else{%>
				ps.setNull(argc++, java.sql.Types.<%=param.getJdbcType()%>);
<%}%>
			} else {
				ps.set<%=param.getResultSetProperty()%>(argc++, <%=param.getName()%>);
			}
<%}else{%>
			ps.set<%=param.getResultSetProperty()%>(argc++, <%=param.getName()%>);
<%}}%>
<% if (result == Result.NONE) {%>
			try{			
				ps.execute();
			}catch(java.sql.SQLException sqle){
				if(sqle.getErrorCode()==1205){
					int retries=0;
					while(retries<5){
						try {
                        	Thread.sleep(5000);
                        }catch(InterruptedException ie) {
                            throw sqle;
                        }
						try{			
							ps.execute();
							break;
						}catch(java.sql.SQLException sqleInner){
							if(sqleInner.getErrorCode()==1205){
								retries++;
							}else{
								throw sqleInner;
							}
						}
					}
					if(retries>=5){
						throw sqle;
					}
				}else{
					throw sqle;
				}
			}
<% } else if (result == Result.VALUE) {%>
			java.sql.ResultSet rs = null;
			try {
				try{
					rs = ps.executeQuery();
				}catch(java.sql.SQLException sqle){
					if(sqle.getErrorCode()==1205){
						int retries=0;
						while(retries<5){
							try {
	                        	Thread.sleep(5000);
	                        }catch(InterruptedException ie) {
	                            throw sqle;
	                        }
							try{			
								rs = ps.executeQuery();
								break;
							}catch(java.sql.SQLException sqleInner){
								if(sqleInner.getErrorCode()==1205){
									retries++;
								}else{
									throw sqleInner;
								}
							}
						}
						if(retries>=5){
							throw sqle;
						}
					}else{
						throw sqle;
					}
				}
				if(!rs.next())
<%if(ps.isPrimitive()){%>
					return 0;
<%}else{%>
					return null;
<%}%>				 
				<%=ps.getJavaType(false)%> val = rs.get<%=ps.getResultSetProperty()%>(1);
				return val;
			} finally {
				if(rs != null) {
					try {
						rs.close();
					} catch (java.sql.SQLException sqle) {
						if(log.isDebugEnabled())log.debug(org.openanzo.exceptions.LogUtils.RDB_MARKER,"Error closing result set",sqle);
					}
				}
			}
<% }else if (result == Result.IDENTITY) {%>
				java.sql.ResultSet rs=null;
	            try {
					 if (ps.execute()) {
	                    rs = ps.getResultSet();
	                } else {
	                    rs = ps.getGeneratedKeys();
	                }
	                if (rs != null && rs.next()) {
	                    return rs.getLong(1);
	                } else {
	                    return null;
	                }
	            } finally {
	                if (rs != null) {
	                    try {
	                        rs.close();
	                    } catch (java.sql.SQLException sqle) {
	                    	if(log.isDebugEnabled())log.debug(org.openanzo.exceptions.LogUtils.RDB_MARKER,"Error closing result set",sqle);								
	                    }
	                }
	            }
<% }else if (result == Result.COUNTER) {%>
				int counter = 0;
				try{
					counter=ps.executeUpdate();
				}catch(java.sql.SQLException sqle){
					if(sqle.getErrorCode()==1205){
						int retries=0;
						while(retries<5){
							try {
	                        	Thread.sleep(5000);
	                        }catch(InterruptedException ie) {
	                            throw sqle;
	                        }
							try{			
								counter=ps.executeUpdate();
								break;
							}catch(java.sql.SQLException sqleInner){
								if(sqleInner.getErrorCode()==1205){
									retries++;
								}else{
									throw sqleInner;
								}
							}
						}
						if(retries>=5){
							throw sqle;
						}
					}else{
						throw sqle;
					}
				}
				return counter;
<% }else if (result == Result.ROW) { %>
			java.sql.ResultSet rs = null;
			try {
				try{
					rs = ps.executeQuery();
				}catch(java.sql.SQLException sqle){
					if(sqle.getErrorCode()==1205){
						int retries=0;
						while(retries<5){
							try {
	                        	Thread.sleep(5000);
	                        }catch(InterruptedException ie) {
	                            throw sqle;
	                        }
							try{			
								rs = ps.executeQuery();
								break;
							}catch(java.sql.SQLException sqleInner){
								if(sqleInner.getErrorCode()==1205){
									retries++;
								}else{
									throw sqleInner;
								}
							}
						}
						if(retries>=5){
							throw sqle;
						}
					}else{
						throw sqle;
					}
				}
				if(!rs.next()) return null;
<%		int i = 1; %>
		<%=ps.getResultsInterface()%> result=new <%=ps.getResultsInterface()%>();
<% 		for (Parameter param : outputs) {%>
				result.<%=param.getName()%>=rs.get<%=param.getResultSetProperty()%>(<%=i++%>);
<% 		} %>
				return result;
			} finally {
				if(rs != null) {
					try {
						rs.close();
					} catch (java.sql.SQLException sqle) {
						if(log.isDebugEnabled())log.debug(org.openanzo.exceptions.LogUtils.RDB_MARKER,"Error closing result set",sqle);
					}
				}
			}
<% } else if (result == Result.ITERATOR){ %>
			java.sql.ResultSet rs = null;
				try{
					rs = ps.executeQuery();
				}catch(java.sql.SQLException sqle){
					if(sqle.getErrorCode()==1205){
						int retries=0;
						while(retries<5){
							try {
	                        	Thread.sleep(5000);
	                        }catch(InterruptedException ie) {
	                            throw sqle;
	                        }
							try{			
								rs = ps.executeQuery();
								break;
							}catch(java.sql.SQLException sqleInner){
								if(sqleInner.getErrorCode()==1205){
									retries++;
								}else{
									throw sqleInner;
								}
							}
						}
						if(retries>=5){
							throw sqle;
						}
					}else{
						throw sqle;
					}
				}

			org.openanzo.jdbc.utils.ClosableIterator<<%if(outputs.size() == 1){%><%=ps.getValueReturnType(true)%><%}else{%><%=ps.getResultsInterface()%><%}%>> iter = new org.openanzo.jdbc.utils.ResultSetIterator<<%if(outputs.size() == 1){%><%=ps.getValueReturnType(true)%><%}else{%><%=ps.getResultsInterface()%><%}%>>(rs, ps, stmtProvider, transform<%=ps.capitalizedName()%>);
			return iter;
<% } %>

		} catch (java.sql.SQLException e) {
<% if(ctx.getRethrowSQLException()) {%>
			throw e;
<%}else{%>
			throw new <%=ctx.getRethrowExceptionName()%>(org.openanzo.exceptions.ExceptionConstants.RDB.FAILED_EXECUTING_SQL,e,"<%=ps.getName()%>",stmtProvider.getSqlString(<%=ps.getName()%>) ,""<%if(ps.hasInputParams()) { %>+ <%=ps.getInputExceptionSignature()%><%}%>,""<%if(ps.hasTemplateParams()){%>+ <%=ps.getTemplateExceptionSignature()%><%}%>);
<%}%>
		} finally {
<% if (result != Result.ITERATOR){ %>
			if (ps != null) {
				try { 
					ps.close(); 
				} catch (java.sql.SQLException sqle) {
					if(log.isDebugEnabled())log.debug(org.openanzo.exceptions.LogUtils.RDB_MARKER,"Error closing prepared statement",sqle);
				}
			}
<% } %>
			//long endtimer=(System.currentTimeMillis()-startTimer);
			//if(endtimer>CUTOFF)System.out.println("[<%=ps.getName()%>]"+endtimer);
		}
<%}else{%>
		java.sql.Statement stmt = null;
		//long startTimer=System.currentTimeMillis();
		try {
			String sql= stmtProvider.getSQL(<%=ps.getName()%>, new String[] {<%=ps.getTemplateParams()%>});
			stmt=connection.createStatement();
<% if (result == Result.NONE) {%>
			stmt.executeUpdate(sql);
<% } else if (result == Result.VALUE) {%>
			java.sql.ResultSet rs = null;
			try {
				try{
					rs = stmt.executeQuery(sql);
				}catch(java.sql.SQLException sqle){
					if(sqle.getErrorCode()==1205){
						int retries=0;
						while(retries<5){
							try {
	                        	Thread.sleep(5000);
	                        }catch(InterruptedException ie) {
	                            throw sqle;
	                        }
							try{			
								rs = stmt.executeQuery(sql);
								break;
							}catch(java.sql.SQLException sqleInner){
								if(sqleInner.getErrorCode()==1205){
									retries++;
								}else{
									throw sqleInner;
								}
							}
						}	
						if(retries>=5){
							throw sqle;
						}
					}else{
						throw sqle;
					}
				}
				if(!rs.next()) return null;
				<%=ps.getJavaType(false)%> val = rs.get<%=ps.getResultSetProperty()%>(1);
				return val;
			} finally {
				if(rs != null) {
					try {
						rs.close();
					} catch (java.sql.SQLException sqle) {
						if(log.isDebugEnabled())log.debug(org.openanzo.exceptions.LogUtils.RDB_MARKER,"Error closing result set",sqle);
					}
				}
			}

<% }else if (result == Result.COUNTER) {%>
				int counter = 0;
				try{
					counter=stmt.executeUpdate(sql);
				}catch(java.sql.SQLException sqle){
					if(sqle.getErrorCode()==1205){
						int retries=0;
						while(retries<5){
							try {
	                        	Thread.sleep(5000);
	                        }catch(InterruptedException ie) {
	                            throw sqle;
	                        }
							try{			
								counter=stmt.executeUpdate(sql);
								break;
							}catch(java.sql.SQLException sqleInner){
								if(sqleInner.getErrorCode()==1205){
									retries++;
								}else{
									throw sqleInner;
								}
							}
						}
						if(retries>=5){
							throw sqle;
						}
					}else{
						throw sqle;
					}
				}
				return counter;
<% }else if (result == Result.ROW) { %>
			java.sql.ResultSet rs = null;
			try {
				try{
					rs = stmt.executeQuery(sql);
				}catch(java.sql.SQLException sqle){
					if(sqle.getErrorCode()==1205){
						int retries=0;
						while(retries<5){
							try {
	                        	Thread.sleep(5000);
	                        }catch(InterruptedException ie) {
	                            throw sqle;
	                        }
							try{			
								rs = stmt.executeQuery(sql);
								break;
							}catch(java.sql.SQLException sqleInner){
								if(sqleInner.getErrorCode()==1205){
									retries++;
								}else{
									throw sqleInner;
								}
							}
						}
						if(retries>=5){
							throw sqle;
						}
					}else{
						throw sqle;
					}
				}
				if(!rs.next()) return null;
<%		int i = 1; %>
<% 		for (Parameter param : outputs) {%>
				result.set<%=param.getRdbProperty()%>(rs.get<%=param.getResultSetProperty()%>(<%=i++%>));
<% 		} %>
				return result;
			} finally {
				if(rs != null) {
					try {
						rs.close();
					} catch (java.sql.SQLException sqle) {
						if(log.isDebugEnabled())log.debug(org.openanzo.exceptions.LogUtils.RDB_MARKER,"Error closing result set",sqle);
					}
				}
			}
<% } else if (result == Result.ITERATOR){ %>
			java.sql.ResultSet rs = null;
				try{
					rs = ps.executeQuery();
				}catch(java.sql.SQLException sqle){
					if(sqle.getErrorCode()==1205){
						int retries=0;
						while(retries<5){
							try {
	                        	Thread.sleep(5000);
	                        }catch(InterruptedException ie) {
	                            throw sqle;
	                        }
							try{			
								rs = ps.executeQuery();
								break;
							}catch(java.sql.SQLException sqleInner){
								if(sqleInner.getErrorCode()==1205){
									retries++;
								}else{
									throw sqleInner;
								}
							}
						}
						if(retries>=5){
							throw sqle;
						}
					}else{
						throw sqle;
					}
				}

			org.openanzo.jdbc.utils.ClosableIterator<<%if(outputs.size() == 1){%><%=ps.getValueReturnType(true)%><%}else{%><%=ps.getResultsInterface()%><%}%>> iter = new org.openanzo.jdbc.utils.ResultSetIterator<<%if(outputs.size() == 1){%><%=ps.getValueReturnType(true)%><%}else{%><%=ps.getResultsInterface()%><%}%>>(rs, ps, stmtProvider, transform);
			return iter;
<% } %>

		} catch (java.sql.SQLException e) {
			<% if(ctx.getRethrowSQLException()) {%>
			throw e;
			<%}else{%>
			throw new <%=ctx.getRethrowExceptionName()%>(org.openanzo.exceptions.ExceptionConstants.RDB.FAILED_EXECUTING_SQL,e,"<%=ps.getName()%>",stmtProvider.getSqlString(<%=ps.getName()%>) ,""<%if(ps.hasInputParams()) { %>+ <%=ps.getInputExceptionSignature()%><%}%>,""<%if(ps.hasTemplateParams()){%>+ <%=ps.getTemplateExceptionSignature()%><%}%>);
			<%}%>
		} finally {
			<% if (result != Result.ITERATOR){ %>
			if (stmt != null) {
				try { 
					stmt.close(); 
				} catch (java.sql.SQLException sqle) {
					if(log.isDebugEnabled())log.debug(org.openanzo.exceptions.LogUtils.RDB_MARKER,"Error closing statement",sqle);
				}
			}
			<% } %>
			//long endtimer=(System.currentTimeMillis()-startTimer);
			//if(endtimer>CUTOFF)System.out.println("[<%=ps.getName()%>]"+endtimer);
		}
<%}%>
	}
<% if (result == Result.NONE||result == Result.IDENTITY||result==Result.COUNTER) { %>
	/**
	 *Batch operation for adding parameters to the <%=ps.capitalizedName()%> prepared statement
	 */
	public static class Batch<%=ps.capitalizedName()%> extends org.openanzo.jdbc.utils.PreparedStatementExecutor {
		/**
		 * Batch operation for adding parameters to the <%=ps.capitalizedName()%> prepared statement
		 * @param connection Connection to execute 
		 * @param provider Prepared statement provider
		 * <%if(ps.hasTemplateParams()){%><%=ps.getTemplateParamsJavadoc()%><%}%>
		 * @throws org.openanzo.jdbc.utils.RdbException
		 */
		public Batch<%=ps.capitalizedName()%>(java.sql.Connection connection, org.openanzo.jdbc.utils.PreparedStatementProvider provider<%if(ps.hasTemplateParams()){%>, <%=ps.getTemplateParamSigniture()%><%}%>) throws org.openanzo.jdbc.utils.RdbException {
			super(connection,provider,<%=ps.getName()%>,new String[] {<%=ps.getTemplateParams()%>});
		}
		
		/**
		 * Sets the input parameters for the <%=ps.getName()%> prepared statement.
		 *<%if(ps.hasInputParams()){%><%=ps.getInputParamsJavadoc()%><%}%>
		 *@throws org.openanzo.jdbc.utils.RdbException
		 */
		public void addEntry (<%if(ps.hasInputParams()) { %><%=ps.getInputParamSigniture()%><%}%>) throws org.openanzo.jdbc.utils.RdbException {
	 		try{
		 		ps.clearParameters();
<%if(ps.hasInputParams()){%> int argc = 1;<%}%>
<% for (Parameter param : inputs) { %>
<%if(!param.isPrimitive()){%>
			if(<%=param.getName()%> == null) {
<%if(!param.canBeNull()){%>
				throw new org.openanzo.jdbc.utils.RdbException(org.openanzo.exceptions.ExceptionConstants.RDB.NULL_PARAMETER,"<%=param.getName()%>","<%=ps.getName()%>");
<%}else{%>
				ps.setNull(argc++, java.sql.Types.<%=param.getJdbcType()%>);
<%}%>
			} else {
				ps.set<%=param.getResultSetProperty()%>(argc++, <%=param.getName()%>);
			}
<% }else{%>
			ps.set<%=param.getResultSetProperty()%>(argc++, <%=param.getName()%>);
<%}}%>
				ps.addBatch();
			}catch(java.sql.SQLException sqle){
				throw new org.openanzo.jdbc.utils.RdbException(org.openanzo.exceptions.ExceptionConstants.RDB.FAILED_PREPARING_STATEMENT, sqle);
			}
		}
	}
<% } %>


<% if (outputs.size() > 1) { %>
	
	/**
	 *Default implementation of <%=ps.getResultsInterface()%>
	 */
	public static class <%=ps.getResultsInterface()%> {
<% 		for (Parameter param : outputs) {%>
			/**Value for the "<%=param.getName()%>" result value*/
			private <%=param.getJavaType(false)%> <%=param.getName()%>;
<% 		} %>

<% 		for (Parameter param : outputs) {%>
		/**
		  *Get <%=param.getRdbProperty()%> value
		  *@return <%=param.getRdbProperty()%> value
		  */
			public <%=param.getJavaType(false)%> get<%=param.getRdbProperty()%>() {
				return this.<%=param.getName()%>;
			}

<% 		} %>
	}

<% } %>
<% } %>
}