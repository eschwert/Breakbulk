<%@ jet
		skeleton="generator.skeleton"
		package="org.openanzo.jet.services"
		class="ServicesCombusListenerTemplate"
		imports="org.openanzo.rdf.jastor.JastorUtils org.openanzo.ontologies.system.*  org.openanzo.rdf.vocabulary.DC java.util.Iterator org.openanzo.rdf.utils.WikiFormatUtils"%>
/*******************************************************************************
 * Copyright (c) 2004, 2007-2008 IBM Corporation and Cambridge Semantics Incorporated.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * File:        <%="$".toString()%>Source<%="$".toString()%>
 * Created by:  Generated Source from org.openanzo.jdbc.utils.opgen.jet
 * Created on:  Generated Source from org.openanzo.jdbc.utils.opgen.jet
 * Revision:	<%="$".toString()%>Id<%="$".toString()%>
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *	   Cambridge Semantics Incorporated - Fork to Anzo
 *******************************************************************************/
 <% ServerServiceWrapper wrapper=(ServerServiceWrapper)argument;Service service = wrapper.service; %>
 <% Boolean isDs=service.getIsDatasourceService(); if(isDs==null)isDs=false;%>
package <%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getCombusPackage())%>;
import javax.jms.MessageProducer;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.TextMessage;

import org.openanzo.combus.endpoint.BaseServiceListener;
import org.openanzo.exceptions.AnzoException;
import org.openanzo.exceptions.ExceptionConstants;
import org.openanzo.rdf.Constants;
import org.openanzo.services.IOperationContext;
import <%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getInterfacePackage())%>.IAuthenticationService;

 /**
 * <% if(service.getPropertyValue(DC.TITLE)!=null){%><%=JastorUtils.getStingValue(service.getPropertyValue(DC.TITLE))%><%}%> combus listener interface
 * @author Generated Code
 */

public class Combus<%=service.getName()%>Listener extends BaseServiceListener {
	/** Service's Name in {@link String} form */
    public static final String SERVICE_ENDPOINT_NAME = Constants.NAMESPACES.SERVICE_PREFIX + "Combus<%=service.getName()%>Listener";


    /** Stats for object*/
    protected org.openanzo.services.DynamicServiceStats stats=null;

   /** Service interface*/
    protected <%=WikiFormatUtils.convertPackageDirectory(((isDs)?"org/openanzo/datasource/":wrapper.task.getInterfacePackage()))%>.I<%=service.getName()%> i<%=service.getName()%>=null;
    
    /**Queue Name Prefix*/
    protected String queueNamePrefix=null;

    /**
     * Create a new JMS<%=service.getName()%>Listener
     * @param authenticationService Authentication service used by this listener
     * @param _service Service for which listener is handling requests
     * @param queueNamePrefix Prefix for the queue name on which this listener is listening
     */
    public Combus<%=service.getName()%>Listener(IAuthenticationService authenticationService,<%=WikiFormatUtils.convertPackageDirectory(((isDs)?"org/openanzo/datasource/":wrapper.task.getInterfacePackage()))%>.I<%=service.getName()%> _service,String queueNamePrefix) {
        super(SERVICE_ENDPOINT_NAME,authenticationService);
        this.i<%=service.getName()%> =_service;
        this.queueNamePrefix=queueNamePrefix;
        stats=new org.openanzo.services.DynamicServiceStats(<%for(Iterator<Operation> operations=JastorUtils.sortByTitle(service.getOperation()).iterator();operations.hasNext();){%><%=WikiFormatUtils.convertPackageDirectory(((isDs)?"org/openanzo/datasource/":wrapper.task.getInterfacePackage()))%>.I<%=service.getName()%>.<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(operations.next().getName())%><%if(operations.hasNext()){%>,<%}}%>);
    }

    /**
     *  Statistics object for this service
     * @return the stats object for this service
     */
    public org.openanzo.services.DynamicServiceStats getStatistics(){
    	return stats;
    }

    public String getQueueName() {
        return "services/"+((queueNamePrefix!=null)?queueNamePrefix:"")+"<%=service.getJmsQueueName()%>";
    }

   
    public TextMessage handleMessage(IOperationContext context, Destination replyTo, String resultFormat, String operation, TextMessage request, MessageProducer messageProducer) throws JMSException, AnzoException {
        verifyCaller(context);
        TextMessage response = null;

<%
	boolean firstOp=true;
	for(Operation operation:JastorUtils.sortByTitle(service.getOperation())){


	Parameter result=null;
	boolean resultHasDefaultFormat=false;

	Iterator<Parameter> results=operation.getResult().iterator();
	if (results.hasNext()){
		result=results.next();
		if(result!=null){
			resultHasDefaultFormat=result.getType().getDefaultJMSFormat()!=null||result.getType().getDefaultRestFormat()!=null||result.getType().getDefaultWSFormat()!=null;
		}
	}
	Parameter parameters[]=new Parameter[8];
	String parameterName[]=new String[8];
	String javaType[]=new String[8];
	String type[]=new String[8];
	String defaultValue[]=new String[8];
	boolean nullAllowed[]=new boolean[8];
	String defaultFormat[]=new String[8];
	String serializer[]=new String[8];
	int propertyLocation[]=new int[8];
	int readerParam=-1;
	if(operation.getRequestParameter0()!=null){ parameters[0]=operation.getRequestParameter0();}
	if(operation.getRequestParameter1()!=null){ parameters[1]=operation.getRequestParameter1();}
	if(operation.getRequestParameter2()!=null){ parameters[2]=operation.getRequestParameter2();}
	if(operation.getRequestParameter3()!=null){ parameters[3]=operation.getRequestParameter3();}
	if(operation.getRequestParameter4()!=null){ parameters[4]=operation.getRequestParameter4();}
	if(operation.getRequestParameter5()!=null){ parameters[5]=operation.getRequestParameter5();}
	if(operation.getRequestParameter6()!=null){ parameters[6]=operation.getRequestParameter6();}
	if(operation.getRequestParameter7()!=null){ parameters[7]=operation.getRequestParameter7();}
	boolean callback=false;
	for(int i=0;i<8;i++){
		if(parameters[i]!=null){
			parameterName[i]=parameters[i].getName();
			if(parameters[i].getType()!=null){
				type[i]=javaType[i]=parameters[i].getType().getJavaType();
				defaultValue[i]=parameters[i].getType().getDefaultValue();
				serializer[i]=parameters[i].getType().getSerializer();
				String location=parameters[i].getParameterLocation();
				if(location==null){
					propertyLocation[i]=0;
				}else if("body".equals(location)){
					propertyLocation[i]=1;
				}else if("parameter".equals(location)){
					propertyLocation[i]=0;
				}else if("transport".equals(location)){
					propertyLocation[i]=2;
				}else if("callbackHandler".equals(location)){
					propertyLocation[i]=-1;
					callback=true;
				}
				Boolean nullAllowedBoolean=parameters[i].getNullAllowed();
				nullAllowed[i]=(nullAllowedBoolean!=null)?nullAllowedBoolean.booleanValue():true;
				defaultFormat[i]=(parameters[i].getType().getDefaultJMSFormat()!=null)?parameters[i].getType().getDefaultJMSFormat().getJavaType():null;

			}
		}
	}
%>
    <%if(!firstOp){%>}else <%}else{%><%}%>if(<%=WikiFormatUtils.convertPackageDirectory(((isDs)?"org/openanzo/datasource/":wrapper.task.getInterfacePackage()))%>.I<%=service.getName()%>.<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(operation.getName())%>.equals(operation)){
		  	long start=0;
        	if (stats.isEnabled()) {
            	start = System.currentTimeMillis();
       		}
        	try{
<%
	for(int i=0;i<8;i++){
		if(javaType[i]!=null&&propertyLocation[i]==0){%>        	
                org.openanzo.combus.JMSMessageWrapper messageWrapper=new org.openanzo.combus.JMSMessageWrapper(request);
<%		break;}}%>
<%
	for(int i=0;i<8;i++){
		if(javaType[i]!=null){
%>
<%if(defaultFormat[i]!=null){%>
				boolean <%=parameterName[i]%>FormatExists=request.propertyExists(<%=WikiFormatUtils.convertPackageDirectory(((isDs)?"org/openanzo/datasource/":wrapper.task.getInterfacePackage()))%>.I<%=service.getName()%>.PARAM_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(parameterName[i])%>Format);
				String <%=parameterName[i]%>Format=(<%=parameterName[i]%>FormatExists)?request.getStringProperty(<%=WikiFormatUtils.convertPackageDirectory(((isDs)?"org/openanzo/datasource/":wrapper.task.getInterfacePackage()))%>.I<%=service.getName()%>.PARAM_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(parameterName[i])%>Format):<%=defaultFormat[i]%>;
<%}%>
<%if(propertyLocation[i]==1){%>
				String <%=parameterName[i]%>=request.getText();
			<%readerParam=i;%>
<%if(!nullAllowed[i]&&javaType[i]!=null){%>
				if(<%=parameterName[i]%>==null){
					 throw new AnzoException(ExceptionConstants.CORE.NULL_PARAMETER,<%=WikiFormatUtils.convertPackageDirectory(((isDs)?"org/openanzo/datasource/":wrapper.task.getInterfacePackage()))%>.I<%=service.getName()%>.PARAM_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(parameterName[i])%>);
				}
<%}%>
<%}else if(propertyLocation[i]==0){%>
				boolean <%=parameterName[i]%>Exists=request.propertyExists(<%=WikiFormatUtils.convertPackageDirectory(((isDs)?"org/openanzo/datasource/":wrapper.task.getInterfacePackage()))%>.I<%=service.getName()%>.PARAM_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(parameterName[i])%>);
<%if(!nullAllowed[i]){%>
				if(!<%=parameterName[i]%>Exists){
					 throw new AnzoException(ExceptionConstants.CORE.NULL_PARAMETER,<%=WikiFormatUtils.convertPackageDirectory(((isDs)?"org/openanzo/datasource/":wrapper.task.getInterfacePackage()))%>.I<%=service.getName()%>.PARAM_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(parameterName[i])%>);
				}
<%}%>
                <%=javaType[i]%> <%=parameterName[i]%> = <%if(nullAllowed[i]){%>(<%=parameterName[i]%>Exists)?<%}%><%=serializer[i]%>.deserialize(messageWrapper,<%=WikiFormatUtils.convertPackageDirectory(((isDs)?"org/openanzo/datasource/":wrapper.task.getInterfacePackage()))%>.I<%=service.getName()%>.PARAM_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(parameterName[i])%>, <%if(defaultFormat[i]!=null){%><%=parameterName[i]%>Format<%}else{%>null<%}%>)<%if(nullAllowed[i]){%><%if(defaultValue[i]!=null){%>:<%=defaultValue[i]%><%}else{%>:null<%}}%>;
	<%}}}%>
<%if(callback){%>
				java.util.Collection<org.openanzo.rdf.Statement> trackers = org.openanzo.rdf.utils.ReadWriteUtils.readStatements(namedGraphs, org.openanzo.rdf.RDFFormat.forMIMEType(namedGraphsFormat));
                org.openanzo.combus.listeners.BatchedReplicationHandler handler = new org.openanzo.combus.listeners.BatchedReplicationHandler(batchSize, replyTo, resultFormat, operation, request, session, mp,recorder);
                this.iReplicationService.replicate(context, trackers, handler,batchSize);
<%}else{%>				
				java.io.StringWriter output = new java.io.StringWriter();
		        this.i<%=service.getName()%>.<%=operation.getName()%>(context<%for(int i=0;i<8;i++){%><%if(parameters[i]!=null&&propertyLocation[i]>-1){%>,<%=parameterName[i]%><%}%><%if(defaultFormat[i]!=null&&readerParam==i){%>,<%=parameterName[readerParam]%>Format<%}%><%}%>, output<%if(resultHasDefaultFormat){%>,resultFormat<%}%>);
		        response = session.createTextMessage();
		        response.setBooleanProperty(org.openanzo.rdf.utils.SerializationConstants.operationFailed, false);
		        String out = output.toString();
		        if (out.length() > 0) {
		            response.setText(output.toString());
		        }
<%}%>
<%firstOp=false;%>
			}finally{
       			if (stats.isEnabled()) {
            	    stats.use("<%=operation.getName()%>",(System.currentTimeMillis() - start));
           	 	}
        	}
<%}%>
		} else {
	    	throw new AnzoException(ExceptionConstants.SERVER.UNKNOWN_OPERATION_ERROR, operation);
	    }
	    return response;
    }
}
