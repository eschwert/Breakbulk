<!--
/*******************************************************************************
 * Copyright (c) 2004, 2007-2008 IBM Corporation and Cambridge Semantics Incorporated.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *     Cambridge Semantics Incorporated - initial API and implementation     
 *******************************************************************************/ 
-->
<%@ jet
		skeleton="generator.skeleton"
		package="org.openanzo.jet.services"
		class="ServicesRestListenerTemplate"
		imports="org.openanzo.rdf.jastor.JastorUtils org.openanzo.ontologies.system.*  org.openanzo.rdf.utils.SerializationConstants org.openanzo.rdf.vocabulary.DC java.util.Iterator org.apache.commons.collections15.multimap.MultiHashMap org.openanzo.jet.services.RestOperation.RequestType org.openanzo.rdf.utils.WikiFormatUtils"%>
/*******************************************************************************
 * Copyright (c) 2004, 2007-2008 IBM Corporation and Cambridge Semantics Incorporated.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * File:        <%="$".toString()%>Source<%="$".toString()%>
 * Created by:  Generated Source from org.openanzo.jdbc.utils.opgen.jet
 * Created on:  Generated Source from org.openanzo.jdbc.utils.opgen.jet
 * Revision:	<%="$".toString()%>Id<%="$".toString()%>
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *	   Cambridge Semantics Incorporated - Fork to Anzo
 *******************************************************************************/
<% ServiceWrapper wrapper=(ServiceWrapper)argument;Service service = wrapper.service; %>
package <%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getRestPackage())%>;
//import java.io.StringWriter;

import org.openanzo.exceptions.AnzoException;
import org.openanzo.rdf.Constants;
import org.openanzo.services.IOperationContext;
import org.openanzo.rdf.URI;
import org.openanzo.rdf.utils.RequestType;
<% java.util.regex.Pattern objectPattern = java.util.regex.Pattern.compile("^/anzo/([a-zA-Z]*)?((\\((\\?[a-zA-Z]*)\\))?(/(([a-zA-Z]*)))?)?$");%>
 /**
 * <% if(service.getPropertyValue(DC.TITLE)!=null){%><%=JastorUtils.getStingValue(service.getPropertyValue(DC.TITLE))%><%}%> rest listener interface
 * @author Generated Code
 */
public class Rest<%=service.getName()%>Listener extends org.openanzo.services.BaseContainerComponent implements org.openanzo.rest.IRestEndpointHandler {
	/** Service's Name in {@link String} form */
    public static final String SERVICE_ENDPOINT_NAME = Constants.NAMESPACES.SERVICE_PREFIX + "Combus<%=service.getName()%>Listener";

    /** Service's Name in {@link URI} form */
    public static final URI    SERVICE_ENDPOINT_URI  = Constants.valueFactory.createURI(SERVICE_ENDPOINT_NAME);

    /** Stats for object*/
    protected <%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getStatsPackage())%>.<%=service.getName()%>Stats stats=null;

   /** Service interface*/
    protected <%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getInterfacePackage())%>.I<%=service.getName()%> i<%=service.getName()%>=null;

    protected org.apache.commons.collections15.multimap.MultiHashMap<String, String> operationMethods = new org.apache.commons.collections15.multimap.MultiHashMap<String, String>();


<%
	java.util.HashMap<String, java.util.HashMap<RequestType, java.util.Collection<RestOperation>>> methods = new java.util.HashMap<String, java.util.HashMap<RequestType, java.util.Collection<RestOperation>>>();
	java.util.HashSet<String> operationNames=new java.util.HashSet<String>();
	for(Operation operation:JastorUtils.sortByTitle(service.getOperation())){

		String opTemplate=operation.getRestEndpoint();
 		java.util.regex.Matcher match = objectPattern.matcher(opTemplate);
 		if (match.matches()) {
            String method = null;
            String op = null;
            if (match.groupCount()>0&&match.group(1) != null) {
                method = match.group(1);
            }
            if (match.groupCount()>6&&match.group(6) != null) {
                op = match.group(6);
            }
            if(op!=null&&!operationNames.contains(op)){
            	operationNames.add(op);%>
    /** Constant for operation <%=op%> */
    public static final String OP_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(op)%> = "<%=op%>";

   <%        }
            java.util.HashMap<RequestType, java.util.Collection<RestOperation>> typeMaps = methods.get("METHOD_"+org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(method));
            if (typeMaps == null) {
                java.util.HashMap<RequestType, java.util.Collection<RestOperation>> maps = new java.util.HashMap<RequestType, java.util.Collection<RestOperation>>();
                java.util.Collection<RestOperation> ops = new java.util.TreeSet<RestOperation>();
                ops.add(new RestOperation((op!=null)?op:org.openanzo.rdf.utils.SerializationConstants.NULL_OP,operation,(match.matches()&&match.groupCount()>4&&match.group(4) != null)));

                maps.put(RequestType.valueOf(operation.getRestType()), ops);%>
    /** Constant for method <%=method%>*/
    public static final String METHOD_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(method)%> = "<%=method%>";
<%
                methods.put("METHOD_"+org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(method), maps);
            } else {
                java.util.Collection<RestOperation> ops = typeMaps.get(RequestType.valueOf(operation.getRestType()));
                if (ops == null) {
                    ops =  new java.util.TreeSet<RestOperation>();
                    typeMaps.put(RequestType.valueOf(operation.getRestType()), ops);
                }
                ops.add(new RestOperation((op!=null)?op:org.openanzo.rdf.utils.SerializationConstants.NULL_OP,operation,(match.matches()&&match.groupCount()>4&&match.group(4) != null)));
            }
       }else{
			java.util.HashMap<RequestType, java.util.Collection<RestOperation>> typeMaps = methods.get(SerializationConstants.NULL_OP);
            if (typeMaps == null) {
                java.util.HashMap<RequestType, java.util.Collection<RestOperation>> maps = new java.util.HashMap<RequestType, java.util.Collection<RestOperation>>();
                java.util.Collection<RestOperation> ops = new java.util.TreeSet<RestOperation>();
                ops.add(new RestOperation(SerializationConstants.NULL_OP,operation,(match.matches()&&match.groupCount()>4&&match.group(4) != null)));
                maps.put(RequestType.valueOf(operation.getRestType()), ops);
                methods.put(SerializationConstants.NULL_OP, maps);
            } else {
                java.util.Collection<RestOperation> ops = typeMaps.get(RequestType.valueOf(operation.getRestType()));
                if (ops == null) {
                    ops = new java.util.TreeSet<RestOperation>();
                    typeMaps.put(RequestType.valueOf(operation.getRestType()), ops);
                }
                ops.add(new RestOperation(SerializationConstants.NULL_OP,operation,(match.matches()&&match.groupCount()>4&&match.group(4) != null)));
            }
		}
	}
%>


    /**
     * Create a new JMS<%=service.getName()%>Proxy
     *
     */
    public Rest<%=service.getName()%>Listener(<%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getInterfacePackage())%>.I<%=service.getName()%> _service) {
        super();
        this.i<%=service.getName()%> = _service;
        stats=new <%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getStatsPackage())%>.<%=service.getName()%>Stats();
<%
	MultiHashMap<String,String> methodOps=new MultiHashMap<String,String>();
	for(java.util.Map.Entry<String,java.util.HashMap<RequestType, java.util.Collection<RestOperation>>> entry:methods.entrySet()){
		for(java.util.Collection<RestOperation> ops:entry.getValue().values()){
			for(RestOperation op:ops){
				if(!methodOps.containsValue(entry.getKey().equals(SerializationConstants.NULL_OP)?"SerializationConstants.NULL_OP":entry.getKey(),(op.operationName!=null&&!op.operationName.equals(SerializationConstants.NULL_OP))?"OP_"+org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(op.operationName):"org.openanzo.rdf.utils.SerializationConstants.NULL_OP")){
					methodOps.put(entry.getKey().equals(SerializationConstants.NULL_OP)?"org.openanzo.rdf.utils.SerializationConstants.NULL_OP":entry.getKey(),(op.operationName!=null&&!op.operationName.equals(SerializationConstants.NULL_OP))?"OP_"+org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(op.operationName):"org.openanzo.rdf.utils.SerializationConstants.NULL_OP");
				}
			}
		}
	}
	for(java.util.Map.Entry<String,java.util.Collection<String>> entry:methodOps.entrySet()){
		for(String opp:entry.getValue()){
%>
        operationMethods.put(<%=entry.getKey()%>, <%=opp%>);
<%}}%>
    }

    public org.apache.commons.collections15.multimap.MultiHashMap<String, String> getMethodOperations(){
    	return operationMethods;
    }

    public org.openanzo.rdf.URI getURI(){
    	return SERVICE_ENDPOINT_URI;
    }

    /** Statistics object for this service*/
    public <%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getStatsPackage())%>.<%=service.getName()%>Stats getStatistics(){
    	return stats;
    }

    public void start() throws AnzoException {
        if (state == org.openanzo.services.servicesState.INITIALIZED || state == org.openanzo.services.servicesState.STOPPED) {
            super.start();
        }
    }

	@SuppressWarnings("unused")
    public boolean handleOperation(IOperationContext context, RequestType type, String objectURI, String method, String operation, String resultFormat, java.util.Map<String, String[]> parameters, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse resp) throws java.io.IOException, AnzoException {
         org.openanzo.services.serialization.RestMessageWrapper messageWrapper=new org.openanzo.services.serialization.RestMessageWrapper(parameters);
<%boolean firstMethod=true;
for(String key:methods.keySet()) {
	 boolean firstRequestType=true;
	 java.util.HashMap<RequestType,java.util.Collection<RestOperation>> ops=methods.get(key);%>

<%if(!firstMethod){%>        }else <%}else{%>        <%}%> if(<%if(SerializationConstants.NULL_OP.equals(key)){%>method==null<%}else{%><%=key%>.equals(method)<%}%>){
			switch(type){
<%for(java.util.Map.Entry<RequestType,java.util.Collection<RestOperation>> entry:ops.entrySet()){%>
<%if(!firstRequestType){%>				}break;<%}firstRequestType=false;%>
				case <%=entry.getKey()%>:
				{
<%boolean firstOp=true;%>
<%for(RestOperation restOperation:entry.getValue()){
	Operation operation=restOperation.operation;
	Parameter result=null;
	boolean resultHasDefaultFormat=false;

	Iterator<Parameter> results=operation.getResult().iterator();
	if (results.hasNext()){
		result=results.next();
		if(result!=null){
			resultHasDefaultFormat=result.getType().getDefaultJMSFormat()!=null||result.getType().getDefaultRestFormat()!=null||result.getType().getDefaultWSFormat()!=null;
		}
	}
	Parameter parameters[]=new Parameter[8];
	String parameterName[]=new String[8];
	String javaType[]=new String[8];
	String type[]=new String[8];
	String defaultValue[]=new String[8];
	boolean nullAllowed[]=new boolean[8];
	String defaultFormat[]=new String[8];
	String serializer[]=new String[8];
	int propertyLocation[]=new int[8];
	int readerParam=-1;
	if(operation.getRequestParameter0()!=null){ parameters[0]=operation.getRequestParameter0();}
	if(operation.getRequestParameter1()!=null){ parameters[1]=operation.getRequestParameter1();}
	if(operation.getRequestParameter2()!=null){ parameters[2]=operation.getRequestParameter2();}
	if(operation.getRequestParameter3()!=null){ parameters[3]=operation.getRequestParameter3();}
	if(operation.getRequestParameter4()!=null){ parameters[4]=operation.getRequestParameter4();}
	if(operation.getRequestParameter5()!=null){ parameters[5]=operation.getRequestParameter5();}
	if(operation.getRequestParameter6()!=null){ parameters[6]=operation.getRequestParameter6();}
	if(operation.getRequestParameter7()!=null){ parameters[7]=operation.getRequestParameter7();}

	for(int i=0;i<8;i++){
		if(parameters[i]!=null){
			parameterName[i]=parameters[i].getName();
			if(parameters[i].getType()!=null){
				type[i]=javaType[i]=parameters[i].getType().getJavaType();
				defaultValue[i]=parameters[i].getType().getDefaultValue();
				serializer[i]=parameters[i].getType().getSerializer();
				String location=parameters[i].getParameterLocation();
				if(location==null){
					propertyLocation[i]=0;
				}else if("body".equals(location)){
					propertyLocation[i]=1;
				}else if("parameter".equals(location)){
					propertyLocation[i]=0;
				}else if("transport".equals(location)){
					propertyLocation[i]=2;
				}else if("callbackHandler".equals(location)){
					propertyLocation[i]=-1;
				}
				Boolean nullAllowedBoolean=parameters[i].getNullAllowed();
				nullAllowed[i]=(nullAllowedBoolean!=null)?nullAllowedBoolean.booleanValue():true;
				defaultFormat[i]=(parameters[i].getType().getDefaultJMSFormat()!=null)?parameters[i].getType().getDefaultJMSFormat().getJavaType():null;

			}
		}
	}

	String opTemplate=operation.getRestEndpoint();
 	java.util.regex.Matcher match = objectPattern.matcher(opTemplate);
 	int uriParam=-1;
 	if (match.matches()) {
      	String param=null;
        if (match.groupCount()>4&&match.group(4) != null) {
            param = match.group(4);
            if(param.startsWith("?")){
            	param=param.substring(1);
                for(int i=0;i<8;i++){
                	if(parameterName[i]!=null&&parameterName[i].equals(param)){
                		uriParam=i;
                	}
                }
           	}
        }
    }
%>

<%if(!firstOp){%>                    }else <%}else{%>                   <%}%> if(<%if(restOperation.operationName==SerializationConstants.NULL_OP){%>operation==null<%}else{%><%="OP_"+org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(restOperation.operationName)%>.equals(operation)<%}%><%if(uriParam>-1){%>&& objectURI!=null<%}%>){
						long start=0;
			        	if (stats.isEnabled()) {
			            	start = System.currentTimeMillis();
			            	stats.get<%=WikiFormatUtils.capFirstLetter(operation.getName())%>Use().increment();
			       		}
			        	try{
<%for(int i=0;i<8;i++){ Parameter parameter=parameters[i];%>
<%if(defaultFormat[i]!=null){%>
							String[] <%=parameterName[i]%>FormatStrings = parameters.get(<%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getInterfacePackage())%>.I<%=service.getName()%>.PARAM_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(parameterName[i])%>Format);
	  						boolean <%=parameterName[i]%>FormatExists=(<%=parameterName[i]%>FormatStrings!=null&&<%=parameterName[i]%>FormatStrings.length>0);
							String <%=parameterName[i]%>Format=(<%=parameterName[i]%>FormatExists)?<%=parameterName[i]%>FormatStrings[0]:<%=defaultFormat[i]%>;
<%}%>
<%if(parameter!=null&&propertyLocation[i]>-1&&i!=uriParam){%>
<%if(propertyLocation[i]==1){%>
<%readerParam=i;%>
							String <%=parameterName[i]%> =  org.apache.commons.io.IOUtils.toString(request.getReader());
<%}else{%>
							boolean <%=parameterName[i]%>Exists=messageWrapper.hasProperty(<%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getInterfacePackage())%>.I<%=service.getName()%>.PARAM_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(parameterName[i])%>);
							<%=javaType[i]%> <%=parameterName[i]%> = <%if(nullAllowed[i]){%>(<%=parameterName[i]%>Exists)?<%}%><%=serializer[i]%>.deserialize(messageWrapper,<%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getInterfacePackage())%>.I<%=service.getName()%>.PARAM_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(parameterName[i])%>, <%if(defaultFormat[i]!=null){%><%=parameterName[i]%>Format<%}else{%>null<%}%>)<%if(nullAllowed[i]){%>:null<%}%>;
<%}}}%>
<%if (uriParam>-1){%>
							<%=javaType[uriParam]%> <%=parameterName[uriParam]%> = <%=serializer[uriParam]%>.deserialize(objectURI,null);
<%}%>
					   	 	this.i<%=service.getName()%>.<%=operation.getName()%>(context<%for(int i=0;i<8;i++){%><%if(parameters[i]!=null&&propertyLocation[i]>-1){%>,<%=parameterName[i]%><%}%><%if(defaultFormat[i]!=null&&readerParam==i){%>,<%=parameterName[readerParam]%>Format<%}%><%}%>, resp.getWriter()<%if(resultHasDefaultFormat){%>,resultFormat<%}%>);
					    	return true;
						}finally{
				       		if (stats.isEnabled()) {
				                stats.get<%=WikiFormatUtils.capFirstLetter(operation.getName())%>Duration().addTime((System.currentTimeMillis() - start));
				            }
				        }
<%firstOp=false;%>
<%}%>
					}
<%}%>
				}
				break;
			}
<%firstMethod=false;%>
<%}%>
		}
	    return false;

    }
}
