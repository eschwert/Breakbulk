<!--
/*******************************************************************************
 * Copyright (c) 2004, 2007-2008 IBM Corporation and Cambridge Semantics Incorporated.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *     Cambridge Semantics Incorporated - initial API and implementation     
 *******************************************************************************/ 
-->
<%@ jet
		skeleton="generator.skeleton"
		package="org.openanzo.jet.services"
		class="ServicesRestProxyTemplate"
		imports="org.openanzo.rdf.jastor.JastorUtils org.openanzo.ontologies.system.*  org.openanzo.rdf.vocabulary.DC java.util.Iterator org.openanzo.rdf.utils.WikiFormatUtils"%>
/*******************************************************************************
 * Copyright (c) 2004, 2007-2008 IBM Corporation and Cambridge Semantics Incorporated.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * File:        <%="$".toString()%>Source<%="$".toString()%>
 * Created by:  Generated Source from org.openanzo.jdbc.utils.opgen.jet
 * Created on:  Generated Source from org.openanzo.jdbc.utils.opgen.jet
 * Revision:	<%="$".toString()%>Id<%="$".toString()%>
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *	   Cambridge Semantics Incorporated - Fork to Anzo
 *******************************************************************************/
<% ServiceWrapper wrapper=(ServiceWrapper)argument;Service service = wrapper.service; %>
package <%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getRestPackage())%>;
import java.io.IOException;

import org.openanzo.serialization.HttpParameterSet;
import org.openanzo.exceptions.AnzoException;
import org.openanzo.exceptions.ExceptionConstants;
import org.openanzo.rdf.Constants;
import org.openanzo.services.IOperationContext;
import org.openanzo.rdf.utils.SerializationConstants;
import org.openanzo.rdf.URI;

 /**
 * <% if(service.getPropertyValue(DC.TITLE)!=null){%><%=JastorUtils.getStingValue(service.getPropertyValue(DC.TITLE))%><%}%> interface
 * <% if(service.getPropertyValue(DC.DESCRIPTION)!=null){%><%=JastorUtils.getStingValue(service.getPropertyValue(DC.DESCRIPTION))%><%}%>
 * @author Generated Code
 *
 */
public class Rest<%=service.getName()%>Proxy extends BaseRestProxyService implements <%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getInterfacePackage())%>.I<%=service.getName()%>{
	/** Service's Name in {@link String} form */
    public static final String SERVICE_NAME = Constants.NAMESPACES.SERVICE_PREFIX + "rest<%=service.getName()%>Proxy";

    /** Service's Name in {@link URI} form */
    public static final URI    SERVICE_URI  = Constants.valueFactory.createURI(SERVICE_NAME);

    /** Stats for object*/
    protected <%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getStatsPackage())%>.<%=service.getName()%>Stats stats=null;

    /**
     * Create a new JMS<%=service.getName()%>Proxy
     *
     */
    public Rest<%=service.getName()%>Proxy(org.openanzo.services.Iservices services, org.openanzo.rdf.URI instanceURI) {
        super(services,instanceURI);
        stats=new <%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getStatsPackage())%>.<%=service.getName()%>Stats();
    }

    public org.openanzo.rdf.URI getURI(){
    	return SERVICE_URI;
    }

    /** Statistics object for this service*/
    public <%=WikiFormatUtils.convertPackageDirectory(wrapper.task.getStatsPackage())%>.<%=service.getName()%>Stats getStatistics(){
    	return stats;
    }
<%
	for(Operation operation:JastorUtils.sortByTitle(service.getOperation())){

	boolean resultSet=false;
	Parameter result=null;
	String resultJavaType=null;
	String resultDefaultFormat=null;
	boolean resultHasDefaultFormat=false;
	String resultSerializer=null;

	Iterator<Parameter> results=operation.getResult().iterator();
	if (results.hasNext()){
		result=results.next();
		if(result!=null){
			resultJavaType=(result.getType().getJavaType()!=null)?result.getType().getJavaType():null;
			resultSerializer=(result.getType().getSerializer()!=null)?result.getType().getSerializer():null;
			resultDefaultFormat=(result.getType().getDefaultWSFormat()!=null)?result.getType().getDefaultWSFormat().getJavaType():null;
			resultHasDefaultFormat=result.getType().getDefaultJMSFormat()!=null||result.getType().getDefaultRestFormat()!=null||result.getType().getDefaultWSFormat()!=null;
		}
	}
	Parameter parameters[]=new Parameter[8];
	String parameterName[]=new String[8];
	String transportName[]=new String[8];
	String javaType[]=new String[8];
	String type[]=new String[8];
	boolean nullAllowed[]=new boolean[8];
	String defaultFormat[]=new String[8];
	boolean hasDefaultFormat[]=new boolean[8];
	String serializer[]=new String[8];
	int propertyLocation[]=new int[8];
	int readerParam=-1;
	boolean isPrimitive[]=new boolean[8];
	if(operation.getRequestParameter0()!=null){ parameters[0]=operation.getRequestParameter0();}
	if(operation.getRequestParameter1()!=null){ parameters[1]=operation.getRequestParameter1();}
	if(operation.getRequestParameter2()!=null){ parameters[2]=operation.getRequestParameter2();}
	if(operation.getRequestParameter3()!=null){ parameters[3]=operation.getRequestParameter3();}
	if(operation.getRequestParameter4()!=null){ parameters[4]=operation.getRequestParameter4();}
	if(operation.getRequestParameter5()!=null){ parameters[5]=operation.getRequestParameter5();}
	if(operation.getRequestParameter6()!=null){ parameters[6]=operation.getRequestParameter6();}
	if(operation.getRequestParameter7()!=null){ parameters[7]=operation.getRequestParameter7();}

	for(int i=0;i<8;i++){
		if(parameters[i]!=null){
			parameterName[i]=transportName[i]=parameters[i].getName();
			if(parameters[i].getType()!=null){
				type[i]=javaType[i]=parameters[i].getType().getJavaType();
				serializer[i]=parameters[i].getType().getSerializer();
				String location=parameters[i].getParameterLocation();
				if(location==null){
					propertyLocation[i]=0;
				}else if("body".equals(location)){
					propertyLocation[i]=1;
				}else if("parameter".equals(location)){
					propertyLocation[i]=0;
				}else if("transport".equals(location)){
					propertyLocation[i]=2;
				}else if("callbackHandler".equals(location)){
					propertyLocation[i]=-1;
				}
				if(javaType[i]!=null&&("int".equals(javaType[i])||"long".equals(javaType[i])||"boolean".equals(javaType[i]))){
					isPrimitive[i]=true;
				}
			}

			Boolean nullAllowedBoolean=parameters[i].getNullAllowed();
			nullAllowed[i]=(nullAllowedBoolean!=null)?nullAllowedBoolean.booleanValue():true;
			defaultFormat[i]=(parameters[i].getType().getDefaultJMSFormat()!=null)?parameters[i].getType().getDefaultJMSFormat().getJavaType():null;
			hasDefaultFormat[i]=parameters[i].getType().getDefaultJMSFormat()!=null||parameters[i].getType().getDefaultRestFormat()!=null||parameters[i].getType().getDefaultWSFormat()!=null;

		}
	}
%>
	/**Test template string for operation <%=operation.getName()%> */
	public static final String TEMPLATE_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(operation.getName())%>="<%=operation.getRestEndpoint()%>";

 public <%if(resultJavaType!=null){%><%=resultJavaType%><%}else{%>void<%}%> <%=operation.getName()%>(IOperationContext context<%for(int i=0;i<8;i++){%><%if (parameters[i]!=null){%>,<%=javaType[i]%> <%=parameterName[i]%><%}%><%}%>) throws AnzoException{
        java.io.StringWriter responseWriter = new java.io.StringWriter();
<%
	for(int i=0;i<8;i++){
		if(javaType[i]!=null){
			switch(propertyLocation[i]){
				case 1:{
					if(!nullAllowed[i]){%>
        if(<%=parameterName[i]%>==null){
             throw new AnzoException(ExceptionConstants.CORE.NULL_PARAMETER,PARAM_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(parameterName[i])%>);
        }
<%}%>
       String _requestBody = null;
<%if(nullAllowed[i]){%>
		if(<%=parameterName[i]%>!=null){
<%}%>
	    _requestBody= <%=serializer[i]%>.serialize(<%=parameterName[i]%>, <%=defaultFormat[i]%>);
<%if(nullAllowed[i]){%>
		}
<%}
					readerParam=i;
			   		transportName[i]="_requestBody";
			    	javaType[i]="String";
				}
				break;

			}
		}
	}%>
<%if(resultHasDefaultFormat){%>
		String resultFormat=<%=resultDefaultFormat%>;
<%}%>
<%if(readerParam>-1){%>
		String <%=parameterName[readerParam]%>Format=<%=defaultFormat[readerParam]%>;
<%}%>
        <%=operation.getName()%>(context<%for(int i=0;i<8;i++){%><%if(parameters[i]!=null&&propertyLocation[i]>-1){%>,<%=transportName[i]%><%}%><%if(defaultFormat[i]!=null&&readerParam==i){%>,<%=parameterName[readerParam]%>Format<%}%><%}%>,responseWriter<%if(resultHasDefaultFormat){%>,resultFormat<%}%>);
<% if(resultSerializer!=null){ %>
<%if(resultJavaType!=null){%>
		return <%=resultSerializer%>.deserialize(responseWriter.toString(),<%if(resultHasDefaultFormat){%>resultFormat<%}else{%>null<%}%><%for(int i=0;i<8;i++){if(parameters[i]!=null&&propertyLocation[i]==-1){%>,<%=parameterName[i]%><%}}%>);
	 	<%}else{%>
        <%=resultSerializer%>.deserialize(responseWriter.toString(),<%if(resultHasDefaultFormat){%>resultFormat<%}else{%>null<%}%><%for(int i=0;i<8;i++){if(parameters[i]!=null&&propertyLocation[i]==-1){%>,<%=parameterName[i]%><%}}%>);
<%}}%>
	}

    public void <%=operation.getName()%>(IOperationContext context<%for(int i=0;i<8;i++){%><%if(parameters[i]!=null&&propertyLocation[i]>-1){%>,<%if (javaType[i]!=null){%><%=javaType[i]%><%}else{%><%=javaType[i]%><%}%> <%=parameterName[i]%><%}%><%if(defaultFormat[i]!=null&&readerParam==i){%>,String <%=parameterName[i]%>Format<%}%><%}%>, java.io.Writer output<%if(resultHasDefaultFormat){%>, String resultFormat<%}%>) throws AnzoException{
        long start=0;
        if (stats.isEnabled()) {
            start = System.currentTimeMillis();
            stats.get<%=WikiFormatUtils.capFirstLetter(operation.getName())%>Use().increment();
        }
        try{
        <%for(int i=0;i<8;i++){
		if(parameterName[i]!=null&&!nullAllowed[i]&&!isPrimitive[i]){%>
        if(<%=parameterName[i]%>==null){
             throw new AnzoException(ExceptionConstants.CORE.NULL_PARAMETER,PARAM_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(parameterName[i])%>);
        }
<%}%>
<%}%>

        HttpParameterSet parameters = new HttpParameterSet();
        @SuppressWarnings("unused") // not used by all generated classes
        org.openanzo.services.serialization.RestMessageWrapper messageWrapper=new org.openanzo.services.serialization.RestMessageWrapper(parameters);

<%if(resultHasDefaultFormat){%>
        parameters.addParameter(SerializationConstants.resultFormat, resultFormat);
<%}%>
        parameters.addParameter(SerializationConstants.operationId, context.getOperationId());
<%int firstTracker=-1;%>
<%for(int i=0;i<8;i++){ %>
<%if(defaultFormat[i]!=null){%>
        parameters.addParameter(PARAM_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(parameterName[i])%>Format,  <%if(readerParam==i){%><%=parameterName[i]%>Format<%}else{%><%=defaultFormat[i]%><%}%>);

<%}%>
<%if(javaType[i]!=null){
		switch(propertyLocation[i]){
		case 0:%>
		<%if(!isPrimitive[i]&&nullAllowed[i]){%>if(<%=parameterName[i]%>!=null)<%}%><%=serializer[i]%>.serialize(<%=parameterName[i]%>,PARAM_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(parameterName[i])%>,<%=(defaultFormat[i]!=null)?defaultFormat[i]:"null"%>,messageWrapper);
		<%
		break;
		case 1:
		resultSet=true;

		%>
		String _requestBody=<%=parameterName[i]%>;
<%break;	}}%>
<%if(firstTracker>-1){%>
<%resultSet=true;%>
        java.io.StringWriter requestWriter=new java.io.StringWriter();
        org.openanzo.serialization.CommonSerializationUtils.serializeTrackers(trackersMap, requestWriter, <%=defaultFormat[firstTracker]%>);
        String _requestBody=requestWriter.toString();
<%}}%>

        StringBuffer result = new StringBuffer();
<%if(operation.getRestType()!=null&&org.openanzo.jet.services.RestOperation.RequestType.GET.name().equals(operation.getRestType())){%>
        int status = doGet(context, TEMPLATE_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(operation.getName())%>, parameters, result);
<%}else if(operation.getRestType()!=null&&org.openanzo.jet.services.RestOperation.RequestType.PUT.name().equals(operation.getRestType())){%>
<%if(!resultSet){%>String _requestBody=null;<%}%>
        int status = doPut(context, TEMPLATE_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(operation.getName())%>, parameters,_requestBody, result);
<%}else if(operation.getRestType()!=null&&org.openanzo.jet.services.RestOperation.RequestType.POST.name().equals(operation.getRestType())){%>
<%if(!resultSet){%>String _requestBody=null;<%}%>
        int status = doPost(context, TEMPLATE_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(operation.getName())%>, parameters,_requestBody, result);
<%}else if(operation.getRestType()!=null&&org.openanzo.jet.services.RestOperation.RequestType.DELETE.name().equals(operation.getRestType())){%>
        int status = doDelete(context, TEMPLATE_<%=org.openanzo.rdf.utils.WikiFormatUtils.formatConstantString(operation.getName())%>, parameters, result);
<%}%>
        if (status != 200) {
            throw new AnzoException( ExceptionConstants.IO.READ_ERROR, Integer.toString(status));
        }
        if (result.length() > 0) {
            try {
                output.write(result.toString());
            } catch (IOException ioe) {
                throw new AnzoException(ExceptionConstants.IO.WRITE_ERROR, ioe);
            }
        }
        }finally{
       		if (stats.isEnabled()) {
                stats.get<%=WikiFormatUtils.capFirstLetter(operation.getName())%>Duration().addTime((System.currentTimeMillis() - start));
            }
        }

    }
<%}%>
}
