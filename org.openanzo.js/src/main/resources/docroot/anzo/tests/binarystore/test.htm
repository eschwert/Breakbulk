<!--

/*******************************************************************************
 * Copyright (c) 2007-2008 Cambridge Semantics Incorporated.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
 
 Author: Simon Martin (<a href="mailto:simon@cambridgesemantics.com">simon@cambridgesemantics.com</a>) 

-->


<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Binary Store Test</title>

    <script type="text/javascript">
    
        // UPDATE THE VALUES BELOW TO CONNECT TO YOUR SERVER
        var properties = {
            location            : "/cometd/",  // location of the comet service
            username            : "sysadmin", // user name for authentication
            password            : "123"       // password for authentication
        }
        
    </script>


    <script type="text/javascript" src="../../../dojo/dojo.js" djConfig="parseOnLoad: false, isDebug:true"></script>
    
    <script type="text/javascript">
        
        // specify what anzo libraries are needed
        dojo.require("anzo.client.AnzoClient");
        dojo.require("anzo.rdf.parser.NTripleParser");
        dojo.require("anzo.rdf.GraphResource");
        dojo.require("anzo.client.BinaryStore");
        var anzoClient = new anzo.client.AnzoClient(properties);
        var binaryStore = new anzo.client.BinaryStore("/binarystore",anzoClient);
        
        
        // connect to the server
        console.debug("Connecting to the server.");
        anzoClient.connect(function(status, message) {
            
            if (status != anzo.messaging.CONNECTION_STATUS_CONNECTED) {
                console.error("Failed to connect to the server: "+message);
                throw Error("Failed to connect to the server: "+message);
            }
                
            console.debug("Connected to the server.");
            setStatus('Connected');                 // show the loading div (may choose to put a throbber here)
            binaryStore.connect(function (success, error){
            	if (!success) {
            		log("Error connecting to Binarystore: " + error);
            	} else {
            		log("Connected to binary store");
            	}
            });
        });
        
        
        function setStatus(msg) {
            document.getElementById('status').innerHTML = msg;
        }
        
       	var bsf = null;
        
        function uploadFile(file) {
        	if ((!bsf || !bsf.src) && !file) {
       			bsf = binaryStore.addItem(true);
       		} else if (file && file instanceof anzo.client.BinaryStoreItem) {
       			bsf = file;
       		}
       		else {
       			//this just tests the getItem method (we already had a bsf)
       			binaryStore.getItem(bsf.src, uploadFile);
       			return;
       		}
        	bsf.fireEvents = true;
        	var progress = function (job, read, len) { 
        		log(job + ":" + read+ " of " + len +" file2.");
        	}
        	var handle = dojo.connect(bsf, "onProgress", progress);
        	bsf.update("testfile", function (error) {
        		dojo.disconnect(handle);
        		if (!error) {
	        		log("File uploaded : " + bsf.src + " Revision : " + bsf.revision);
	        		document.getElementById("display").src = "test.jpg";
	        		document.getElementById("display").src = bsf.src;
	        	} else {
	        		log("ERROR:" + error.message);
	        	}
        	}); 
        }

		var bsf2 = null;
        function uploadFile2(file) {
        	if ((!bsf2 || !bsf2.src) && !file) {
       			bsf2 = binaryStore.addItem(false);
       		} else if (file && file instanceof anzo.client.BinaryStoreItem) {
       			bsf2 = file;
       		}
       		else {
       			//this just tests the getItem method (we already had a bsf)
       			binaryStore.getItem(bsf2.src, uploadFile2);
       			return;
       		}
        	bsf2.fireEvents = true;
        	var progress = function (job, read, len) { 
        		log(job + ":" + read+ " of " + len +" file2 have been uploaded.");
        	}
        	var handle = dojo.connect(bsf2, "onProgress", progress);
        	bsf2.update("testfile2", function (error) {
        		dojo.disconnect(handle);
        		if (!error) {
	        		log("File uploaded : " + bsf2.src + " Revision : " + bsf2.revision);
	        	} else {
	        		log("ERROR:" + error.message);
	        	}
        	}); 
        }
        
        function updateURI() {
        	var uri = document.getElementById("bsfuri").value;
        	binaryStore.getItem(uri,uploadFile2);
        }
        
        function log(str) {
        	var log = document.getElementById("log");
        	str = log.value + str + "\n";
        	log.value = str;
        }
        
        function uploadFiles() {
        	uploadFile();
        	uploadFile2();
        }
        
        function removeFile() {
        	binaryStore.removeFile(bsf2, function(error) {
        		if (!error) {
        			log(bsf2.src + " deleted");
        		} else {
        			log("Error deleting " + bsf2.src + " " + error);
        		}
        	});
        }
        
        
	 
    </script>

</head>
<body>

    <div style='margin-bottom: 0px; padding: 0px;'>
        <span id='status'>Connecting...</span>
    </div>
    
    <BR>
    <FORM id="testfile">
    	<INPUT type="file" name="file">
    </FORM>
    <FORM id="testfile2">
    	<INPUT type="file" name="file">
    </FORM>
    <button onclick="uploadFiles()">Upload</button>
    <button onclick="removeFile()">Remove</button>

    <input type="text" id="bsfuri"><button onclick="updateURI()">Update</button>

    <BR>
    <TEXTAREA id="log" style="width:100%;height:250px"></TEXTAREA>
    <IMG id="display">
    
    
</body>
</html>
