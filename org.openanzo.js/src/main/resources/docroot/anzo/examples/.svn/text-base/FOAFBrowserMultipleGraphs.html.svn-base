<!--

/*******************************************************************************
 * Copyright (c) 2007-2008 Cambridge Semantics Incorporated.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
 
 Author: Rouben Meschian (<a href="mailto:rmeschian@cambridgesemantics.com">rmeschian@cambridgesemantics.com</a>) 

-->


<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>FOAF Browser</title>

    <script type="text/javascript">
    
        // UPDATE THE VALUES BELOW TO CONNECT TO YOUR SERVER
        var properties = {
            location            : "/cometd/",  // location of the comet service
            username            : "sysadmin", // user name for authentication
            password            : "123"       // password for authentication
        }
        
    </script>


    <script type="text/javascript" src="../../dojo/dojo.js"></script>
    
    <script type="text/javascript">
        
        // specify what anzo libraries are needed
        dojo.require("anzo.client.AnzoClient");
        dojo.require("anzo.rdf.parser.NTripleParser");
        dojo.require("anzo.rdf.GraphResource");
        
        var anzoClient = new anzo.client.AnzoClient(properties);
        
        var downloadedUsers = new anzo.utils.Set();
        
        // get the graph that keeps track of all other graphs in our application
        var foafGraphURI = "http://example.org/foafApplicationGraph2";  // uri of the graph we want to use
        var foafGraph    = null;
        
        // hook update complete event handler to hide the loader
        dojo.connect(anzoClient, 'updateRepositoryComplete', function(success, errors) {
            if(success) {
                console.debug("Finished updating the server.");
                setStatus('Finished updating server', false);      
            } else {
                console.error("Failed to update server: "+errors);
                throw Error("Failed to update server: "+errors);
            }
        });
        
        // connect to the server
        console.debug("Connecting to the server.");
        anzoClient.connect(function(status, message) {
            
            if (status != anzo.messaging.CONNECTION_STATUS_CONNECTED) {
                console.error("Failed to connected to the server: "+message);
                throw Error("Failed to connect to the server: "+message);
            }
                
            console.debug("Connected to the server.");
            
            console.debug("Downloading graph from server.");
            setStatus('Loading', true);                 // show the loading div (may choose to put a throbber here)
            anzoClient.getReplicaGraph(foafGraphURI, null, function (graph, errors) {
                if (!graph) {
                    throw Error("Error retrieving graph: "+errors);
                }
                setStatus('Finished loading', false);
                foafGraph = graph;
            
                // hook to the search button
                document.getElementById('searchBtn').onclick = function(e) {
                    var searchText = document.getElementById('searchText').value; // get search text
                    searchUsers(searchText, function(values) {
                        renderPeopleTable(document.getElementById("searchResults"), values);
                    });	
                }
                
                // hook to the load button
                document.getElementById("loadBtn").onclick = function() {
                    var vals = document.getElementById("ntriples").value; // get specified n-triples
                    
                    if(vals == '')
                        return;
                    
                    var _graphURI = "http://example.org/foaf" + Math.floor(Math.random()*1000000);  // uri of the graph we want to use
                    anzoClient.getReplicaGraph(_graphURI, null, function(_graph, errors) {
                        anzoClient.begin(); // begin the transaction
                        console.debug("Loading parsing the specified triples N-Triples and loading them into the graph.");
                        anzo.rdf.parser.NTripleParser.parse(vals, _graph); // load n-triples into the graph
                        anzoClient.commit(); // commit the transaction
                        
                        foafGraph.add("http://example.org/graphs", "http://example.org/hasGraph", _graphURI);
                        
                        // send changes to the server
                        console.debug("Updating the server.");
                        setStatus('Updating server', true);  // show the loading div (may choose to put a throbber here)
                        anzoClient.updateRepository();  // replicate with the server (send the triples we loaded up to the server, and bring down any new data that we are interested in)
                    });
                }

                // Handle the 'enter' key in the search text box.
                dojo.connect(dojo.byId("searchText"), "onkeypress", null, function(event) {
                    if (event.keyCode == dojo.keys.ENTER) {
                        dojo.byId("searchBtn").click();
                    }
                });
            });
        });
        
        
        function renderPeopleTable(table, values) {
        
            // clear table
            while(table.tBodies[0].rows.length > 0)
                table.tBodies[0].deleteRow(0);
            
            for(var i = 0; i < values.length; i++) {
                
                var _uri = values[i];
                var _graphURIs = resURIToGraphUris(_uri);
                
                if(_graphURIs == null || _graphURIs.length == 0)
                    continue;
                
                var tr = table.tBodies[0].insertRow(i);
                
                var td1 = tr.appendChild(document.createElement('td'));
                
                var _stmts = anzoClient.replicaFind(_uri, 'http://xmlns.com/foaf/0.1/depiction', null, _graphURIs);
                if(_stmts && _stmts.length > 0) {
                    td1.innerHTML = '<img width=20 height=20 src="'+_stmts[0].object+'" />';
                }
                
                var td2 = tr.appendChild(document.createElement('td'));
                var name = '';
                
                _stmts = anzoClient.replicaFind(_uri, 'http://xmlns.com/foaf/0.1/firstName', null, _graphURIs);
                if(_stmts && _stmts.length > 0) {
                    name += _stmts[0].object;
                }
                
                _stmts = anzoClient.replicaFind(_uri, 'http://xmlns.com/foaf/0.1/surname', null, _graphURIs);
                if(_stmts && _stmts.length > 0) {
                    name += ' '+_stmts[0].object;
                }
                
                if(name == '')
                    name = _uri;
                
                td2.innerHTML = "<a href='javascript:void(0);'>"+name+"</a>";
                
                td2.uri       = _uri;
                td2.graphURIs = _graphURIs;
                
                td2.onclick = function() {
                    renderUser(this.uri, this.graphURIs);
                }
            }
        }
        
        function renderUser(uri, graphURIs) {
            
            // going against the graph directly (no beans here)

            var _stmts = anzoClient.replicaFind(uri, 'http://xmlns.com/foaf/0.1/depiction', null, graphURIs);
            if(_stmts && _stmts.length > 0) {
                document.getElementById('img').style.display = '';
                document.getElementById('img').src = _stmts[0].object;
            } else {
                document.getElementById('img').style.display = 'none';
            }
            
            _stmts = anzoClient.replicaFind(uri, 'http://xmlns.com/foaf/0.1/firstName', null, graphURIs);
            if(_stmts && _stmts.length > 0) {
                document.getElementById('firstName').style.display = '';
                document.getElementById('firstName').innerHTML = _stmts[0].object;
            } else {
                document.getElementById('firstName').style.display = 'none';
            }
            
            _stmts = anzoClient.replicaFind(uri, 'http://xmlns.com/foaf/0.1/surname', null, graphURIs);
            if(_stmts && _stmts.length > 0) {
                document.getElementById('lastName').style.display = '';
                document.getElementById('lastName').innerHTML = _stmts[0].object;
            } else {
                document.getElementById('lastName').style.display = 'none';
            }
            
            _stmts = anzoClient.replicaFind(uri, 'http://xmlns.com/foaf/0.1/phone', null, graphURIs);
            if(_stmts && _stmts.length > 0) {
                document.getElementById('phone').style.display = '';
                document.getElementById('phone').innerHTML = _stmts[0].object;
            } else {
                document.getElementById('phone').style.display = 'none';
            }
            
            var stmts = anzoClient.replicaFind(uri, 'http://xmlns.com/foaf/0.1/mbox', null, graphURIs); // find(s, p, ?)
            var mbox_href = '';
            var mbox_label = '';
            if(stmts && stmts.length > 0) {
                mbox_href = stmts[0].object.value;
                mbox_label = stmts[0].object.value.replace('mailto:', '');
            }
            var a = document.getElementById("mbox");
            a.href = mbox_href;
            a.innerHTML = mbox_label;
            
            _stmts = anzoClient.replicaFind(uri, 'http://xmlns.com/foaf/0.1/knows', null, graphURIs);
            var _knows = [];
            for(var i = 0; i < _stmts.length; i++) 
                _knows.push(_stmts[i].object);
            
            downloadUsers(_knows, function(users) {
                renderPeopleTable(document.getElementById('knows'), users);
            });
        }
        
        function getFOAFGraphs() {
            var _graphStmts = foafGraph.find("http://example.org/graphs", "http://example.org/hasGraph", null);
            var namedGraphs = []; 
            for(var i = 0; i < _graphStmts.length; i++)
                namedGraphs.push(_graphStmts[i].object);
            return namedGraphs;
        }
        
        function setStatus(msg, isLoading) {
            document.getElementById('loader').style.display    = isLoading ? ''     : 'none';
            document.getElementById('status').innerHTML = msg;
            //document.getElementById('container').style.display = isLoading ? 'none' : '';
        }
        
        var _resURIToGraphUris = null;
        
        function putResURIToGraphUris(uri, graphURI) {
            
            if(_resURIToGraphUris == null)
                _resURIToGraphUris = {};
            
            var graphURIs = _resURIToGraphUris[uri.toString()];
            if(!graphURIs) {
                _resURIToGraphUris[uri.toString()] = graphURIs = [];
            }
            if(dojo.indexOf(graphURIs, graphURI.toString()) < 0)
                graphURIs.push(graphURI.toString());

        }
        
        function resURIToGraphUris(uri) {
            if(_resURIToGraphUris == null)
                _resURIToGraphUris = {};
            var graphURIs = _resURIToGraphUris[uri.toString()];
            return graphURIs;
        }
        
        
        function searchUsers(searchText, callback) {
            // create SPARQL query with the specifies search criteria
            var query = "SELECT ?value ?g " +
                        " WHERE { " +
                            " GRAPH ?g { "+
                                " ?value <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>  <http://xmlns.com/foaf/0.1/Person> . ";
                                    if(searchText != '' && searchText != '*') {
                                        // do a text search only if the user specified a search string
                                        query += " ?value ?p ?txt . ?txt <http://openanzo.org/ontologies/2008/07/Anzo#textmatch> '"+searchText+"' . ";
                                    }
            query +=     	" } ";
            query +=     " } ";
            
            console.debug("Executing query: "+query);
            
            var namedGraphs = getFOAFGraphs();
            
            setStatus('Searching', true);
            anzoClient.serverQuery(null, namedGraphs, null, query, null, function(msg, success, error) {
                setStatus('Finished searching', false); 
                
                if (!success) {
                    console.error("Query execution failed: " + dojo.toJson(error));
                    throw Error("Query execution failed: " + dojo.toJson(error));
                }
                
                console.debug("Query execution successful.");
                console.debug("Query execution results: "+dojo.toJson(msg));

                var values = [];
                var graphURIs = [];
                for(var i = 0; i < msg.results.bindings.length; i++) {
                    if(msg.results.bindings[i] && msg.results.bindings[i]['value']) {
                        var _value = msg.results.bindings[i]['value'].value;
                        var _graphURI = msg.results.bindings[i]['g'].value;
                        putResURIToGraphUris(_value, _graphURI);
                        values.push(_value);
                        graphURIs.push(_graphURI);
                    }
                }

                anzoClient.getReplicaGraphs(graphURIs, null, function(graphs, errors) {
                    if(success) {
                        downloadedUsers.addAll(values);
                        callback(values);
                    } else {
                        throw new Error("Error retrieving graphs:" + dojo.toJson(errors));
                        callback(null);
                    }
                });
            });
        }
        
        function downloadUsers(users, callback) {
            
            var graphToUsr = {};
            
            // 1. do a sparql query to figure out which graphs the users are in
            var query = "SELECT ";
            var unloadedUsers = false;
            for(var i = 0; i < users.length; i++) {
                if(downloadedUsers.contains(users[i]))
                    continue;
                graphToUsr["g"+i] = users[i];
                query += "  ?g"+i;
                unloadedUsers = true;
            }
            
            if(unloadedUsers == false)
                return callback(users);
            
            query += "  WHERE  {  ";
            
                for(var i = 0; i < users.length; i++) {
                    if(i > 0)
                        query += "  UNION "
                    query += "{  GRAPH ?g"+i+"  {  <"+users[i]+"> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xmlns.com/foaf/0.1/Person> . } }";
                }
            
            
            query += " } ";
            
            setStatus('Searching for user graphs', true); 
            anzoClient.serverQuery(null, [anzo.client.Vocabulary.allNamedGraphsUri], null, query, null, function(msg, success, error) {
				setStatus('Finished searching for user graphs', false); 
				
				if (!success) {
				    console.error("Query execution failed: " + dojo.toJson(error));
				    throw Error("Query execution failed: " + dojo.toJson(error));
				}
				
				// get search result URIs and their graphs
				var graphURIs = [];
				for(var i = 0; i < msg.results.bindings.length; i++) {
				    var gKey = null;
				    for(var key in msg.results.bindings[i]) {
				        gKey = key;
				        break;
				    }
				    if (!gKey) {
				        continue;
				    }
				    var _value = graphToUsr[gKey];
				    var _graphURI = msg.results.bindings[i][gKey].value;
				    
				    putResURIToGraphUris(_value, _graphURI);
				    graphURIs.push(_graphURI);
				}
				
				anzoClient.getReplicaGraphs(graphURIs, null, function(graphs, errors) {
				    if(success)
				        callback(users);
				    else {
				        callback(users);
				        throw new Error("Error retrieving graphs:" + dojo.toJson(errors));
				    }
				});
            });
            
        }
        
    </script>

</head>
<body>

    <div style='margin-bottom: 0px; padding: 0px;'>
        <img src='loader.gif' id='loader' style='display: none;' /> <span id='status'>Done</span>
    </div>
    
    <div id='container'>
    
        <h1>Sample FOAF Browser</h1>
        
        <p>
            Load FOAF data into the system by pasting it in N-Triples format into the text area below. Load it and browse the uploaded users.
        </p>
        
        <hr/>
        
        <table style='minHeight: 300px; width: 99%;'>
        
            <tr>
                
                <td style='border-right: solid gray 1px; width: 230px; padding-right: 5px;'>
                    <input id='searchText' style='text' /> <button id='searchBtn'>Search</button>
                    <table id='searchResults'>
                        <tbody></tbody>
                    </table>
                </td>
                
                <td style='padding-left: 5px;'>
                    <table>
                        <tr>
                            <td style='width: 105px;' >
                                <img id='img' width='100' height='100' />
                            </td>
                            <td>
                                <h2 style='padding: 0px; margin: 0px;'><span id='firstName'  ></span> <span id='lastName' ></span></h2>
                                <a id='mbox'></a><br/>
                                <span id='phone'></span>
                            </td>
                        </tr>
                        <tr>
                            <td COLSPAN=2 style='border-top: solid 1px gray;'>
                                <h5 style='margin: 0px; padding: 0px;'>Knows</h5>
                                <table id='knows'>
                                    <tbody></tbody>
                                </table>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
            
        </table>
        
        <hr/>
        
        <h4>Load FOAF Data (<a href="http://www.w3.org/TR/rdf-testcases/#ntriples">N-Triples</a> format)</h4>
        
        
        <textarea id='ntriples' style='width: 99%; height: 250px;'>
            <http://example.org/rouben>   <http://xmlns.com/foaf/0.1/firstName>   "Rouben"  .
            <http://example.org/rouben>   <http://xmlns.com/foaf/0.1/surname>   "Meschian"  .
            <http://example.org/rouben>   <http://xmlns.com/foaf/0.1/mbox>   <mailto:rmeschian@cambridgesemantics.com>  .
            <http://example.org/rouben>   <http://xmlns.com/foaf/0.1/phone>   "617-555-1234"  .
            <http://example.org/rouben>   <http://xmlns.com/foaf/0.1/depiction>   <http://www.cambridgesemantics.com/people/photo/rmeschian>  .
            <http://example.org/rouben>   <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://xmlns.com/foaf/0.1/Person>  .
            <http://example.org/rouben>   <http://xmlns.com/foaf/0.1/knows>   <http://example.org/sean>  .
            <http://example.org/rouben>   <http://xmlns.com/foaf/0.1/knows>   <http://example.org/ben>  .
            <http://example.org/rouben>   <http://xmlns.com/foaf/0.1/knows>   <http://example.org/jordi>  .
            
            <http://example.org/sean>   <http://xmlns.com/foaf/0.1/firstName>   "Sean"  .
            <http://example.org/sean>   <http://xmlns.com/foaf/0.1/surname>   "Martin"  .
            <http://example.org/sean>   <http://xmlns.com/foaf/0.1/mbox>   <mailto:sean@cambridgesemantics.com>  .
            <http://example.org/sean>   <http://xmlns.com/foaf/0.1/phone>   "617-555-4637"  .
            <http://example.org/sean>   <http://xmlns.com/foaf/0.1/depiction>   <http://www.cambridgesemantics.com/people/photo/sean>  .
            <http://example.org/sean>   <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://xmlns.com/foaf/0.1/Person>  .
            <http://example.org/sean>   <http://xmlns.com/foaf/0.1/knows>   <http://example.org/rouben>  .
            <http://example.org/sean>   <http://xmlns.com/foaf/0.1/knows>   <http://example.org/ben>  .
            <http://example.org/sean>   <http://xmlns.com/foaf/0.1/knows>   <http://example.org/jordi>  .
            
            <http://example.org/ben>   <http://xmlns.com/foaf/0.1/firstName>   "Ben"  .
            <http://example.org/ben>   <http://xmlns.com/foaf/0.1/surname>   "Szekely"  .
            <http://example.org/ben>   <http://xmlns.com/foaf/0.1/mbox>   <mailto:ben@cambridgesemantics.com>  .
            <http://example.org/ben>   <http://xmlns.com/foaf/0.1/phone>   "617-555-4321"  .
            <http://example.org/ben>   <http://xmlns.com/foaf/0.1/depiction>   <http://www.cambridgesemantics.com/people/photo/ben>  .
            <http://example.org/ben>   <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://xmlns.com/foaf/0.1/Person>  .
            <http://example.org/ben>   <http://xmlns.com/foaf/0.1/knows>   <http://example.org/rouben>  .
            <http://example.org/ben>   <http://xmlns.com/foaf/0.1/knows>   <http://example.org/sean>  .
            
            <http://example.org/jordi>   <http://xmlns.com/foaf/0.1/firstName>   "Jordi"  .
            <http://example.org/jordi>   <http://xmlns.com/foaf/0.1/surname>   "Albornoz Mulligan"  .
            <http://example.org/jordi>   <http://xmlns.com/foaf/0.1/mbox>   <mailto:jordi@cambridgesemantics.com>  .
            <http://example.org/jordi>   <http://xmlns.com/foaf/0.1/phone>   "617-555-3321"  .
            <http://example.org/jordi>   <http://xmlns.com/foaf/0.1/depiction>   <http://www.cambridgesemantics.com/people/photo/jordi>  .
            <http://example.org/jordi>   <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>   <http://xmlns.com/foaf/0.1/Person>  .
            <http://example.org/jordi>   <http://xmlns.com/foaf/0.1/knows>   <http://example.org/ben>  .
            <http://example.org/jordi>   <http://xmlns.com/foaf/0.1/knows>   <http://example.org/sean>  .
        </textarea>
        
        <button id='loadBtn'>Load</button>
    
    </div>
    
    
</body>
</html>
