#*******************************************************************************
# Copyright (c) 2004, 2007 IBM Corporation and Cambridge Semantics Incorporated.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
# 
#  File:        $Source: /cvsroot/slrp/common/com.ibm.adtech.jdbc.utils/src/com/ibm/adtech/jdbc/utils/opgen/ant/CompositionTask.java,v $
# Created by:  Generated by Composition Ant Task
# Created on:  10/30/09
# Revision:	$Id: CompositionTask.java 176 2007-07-31 14:22:30Z mroy $
# 
# Contributors:
#     IBM Corporation - initial API and implementation
#*******************************************************************************
#
#
initDBtables=CREATE TABLE GLITTERUNIT ( FAKE INT NOT NULL ) {2}  ;; CREATE INDEX GLIT_INDX ON GLITTERUNIT(FAKE) {1};; INSERT INTO GLITTERUNIT (FAKE) VALUES (0);; CREATE TABLE {0}_U ( ID   {6} NOT NULL, VALUE  {7}({4}) {3}, REF   {6} NOT NULL, PRIMARY KEY(ID) )  {2};; CREATE TABLE {0}_B ( ID   {6} NOT NULL, VALUE  {7}({4}) {3}, REF   {6} NOT NULL, PRIMARY KEY(ID) )  {2};; CREATE TABLE {0}_L ( ID   {6} NOT NULL, VALUE  {7}({4}) {3}, MODIFIER_ID {6}  NOT NULL, REF   {6} NOT NULL, PRIMARY KEY(ID) )  {2};; CREATE TABLE {0}_TL ( ID          {6} NOT NULL, VALUE       {7}({4}) {3}, MODIFIER_ID {6}  NOT NULL, REF   {6} NOT NULL, PRIMARY KEY(ID) )  {2};; CREATE TABLE {0}_LL ( ID   {6} NOT NULL, HASH  {6} NOT NULL, VALUE  {8}, MODIFIER_ID {6}, REF   {6} NOT NULL, PRIMARY KEY (ID) ) {2};; CREATE TABLE {0}_LTL ( ID   {6} NOT NULL, HASH  {6} NOT NULL, VALUE  {8}, MODIFIER_ID {6}, REF   {6} NOT NULL, PRIMARY KEY (ID) ) {2};; CREATE TABLE {0}_LU ( ID   {6} NOT NULL, HASH  {6} NOT NULL, VALUE  {8}, REF   {6} NOT NULL, PRIMARY KEY (ID) ) {2};; CREATE TABLE {0}_USED_IDS ( ID            {6} NOT NULL, TRANSACTIONID {6} NOT NULL )  {2};; CREATE TABLE {0}_DATATYPE ( ID   {6} NOT NULL, VALUE  {7}({4}) {3}, PRIMARY KEY(ID) )  {2} ;; CREATE TABLE {0}_LANGUAGE ( ID   {6} NOT NULL, VALUE  {7}({4}) {3}, PRIMARY KEY(ID) )  {2};; CREATE TABLE STATEMENTS ( ID                  {7}({4}) {3} NOT NULL , METADATA    {5} NOT NULL, UUID     {6} NOT NULL, NAMEDGRAPHID   {6} NOT NULL, SUBJECT        {6} NOT NULL, PREDICATE      {6} NOT NULL, OBJECT         {6} NOT NULL, RSTART                 {6} NOT NULL, REND     {6} , COMMITTED               {6} NOT NULL ) {2};; CREATE TABLE STATEMENTS_NR ( ID                  {7}({4}) {3} NOT NULL , METADATA    {5} NOT NULL, NAMEDGRAPHID   {6} NOT NULL, SUBJECT        {6} NOT NULL, PREDICATE      {6} NOT NULL, OBJECT         {6} NOT NULL, COMMITTED               {6} NOT NULL, PRIMARY KEY    (ID) ) {2};; CREATE TABLE NAMEDGRAPHS ( ID              {6} NOT NULL, METAID   {6} NOT NULL, UUID   {6} NOT NULL, REVISION  {6} NOT NULL, HSTART         {6} NOT NULL, HEND         {6}, LASTMODIFIEDBY {6} NOT NULL, COMMITTED       {6} NOT NULL, PRIMARY KEY  (UUID,REVISION) ) {2};; CREATE TABLE NAMEDGRAPHS_NR ( ID              {6} NOT NULL, METAID   {6} NOT NULL, UUID   {6} NOT NULL, REVISION  {6} NOT NULL, HSTART         {6} NOT NULL, LASTMODIFIEDBY {6} NOT NULL, COMMITTED       {6} NOT NULL, PRIMARY KEY  (UUID,REVISION) ) {2};; CREATE TABLE LASTTRANSACTIONTIME ( ID    {6} NOT NULL, COMMITED  {6} NOT NULL, PRIMARY KEY (ID) );; CREATE TABLE TRANSACTIONTIME ( ID    {6} NOT NULL, SERVERID  {7}({4}) {3} NOT NULL, COMMITED  {6}, URI    {6}, CONTEXT   {8}, PRIMARY KEY (ID) ) {2};; CREATE TABLE LOCKED_GRAPHS ( ID              {6} NOT NULL, TRANSACTIONID {6} NOT NULL, PRIMARY KEY  (ID) ) {2};; CREATE TABLE QUERY_GRAPHS( ID   {6} NOT NULL, DSID  {6} NOT NULL, PRIMARY KEY (ID,DSID) ) {2};; CREATE VIEW ALL_STMTS_VIEW (METADATA,NAMEDGRAPHID,SUBJECT,PREDICATE,OBJECT,COMMITTED) AS SELECT ST.METADATA,ST.NAMEDGRAPHID,ST.SUBJECT,ST.PREDICATE,ST.OBJECT,COMMITTED FROM STATEMENTS ST WHERE COMMITTED<=0 AND ST.REND IS NULL UNION SELECT ST.METADATA,ST.NAMEDGRAPHID,ST.SUBJECT,ST.PREDICATE,ST.OBJECT,COMMITTED FROM STATEMENTS_NR ST WHERE COMMITTED<=0;; CREATE VIEW ALL_LITERALS_VIEW (ID,VALUE,MODIFIER_ID,REF) AS SELECT L.ID,L.VALUE,L.MODIFIER_ID,L.REF FROM ANZO_L L WHERE L.REF=0 UNION SELECT TL.ID,TL.VALUE,TL.MODIFIER_ID,TL.REF FROM ANZO_TL TL WHERE TL.REF=0;; 
initIndexes=CREATE INDEX SRUUID ON STATEMENTS (UUID,COMMITTED,REND,RSTART);; CREATE INDEX SRHS ON STATEMENTS (SUBJECT,PREDICATE);; CREATE INDEX SRHPO ON STATEMENTS (PREDICATE,OBJECT);; CREATE INDEX SRHO ON STATEMENTS (OBJECT);; CREATE INDEX SRHC ON STATEMENTS (COMMITTED,ID,REND);; CREATE INDEX SRIE ON STATEMENTS (ID,REND);; CREATE INDEX SNG ON STATEMENTS (COMMITTED,NAMEDGRAPHID,REND) ;; CREATE INDEX SRHSSPOIO ON STATEMENTS (COMMITTED,NAMEDGRAPHID,SUBJECT,PREDICATE,OBJECT,METADATA,RSTART,ID,REND);; CREATE INDEX SRHSSPOIO_NR ON STATEMENTS_NR (NAMEDGRAPHID,SUBJECT,PREDICATE,OBJECT,METADATA,ID);; CREATE INDEX SRHS_NR ON STATEMENTS_NR (SUBJECT);; CREATE INDEX SRHP_NR ON STATEMENTS_NR (PREDICATE);; CREATE INDEX SRHO_NR ON STATEMENTS_NR (OBJECT);; CREATE INDEX SRHC_NR ON STATEMENTS_NR (COMMITTED);; CREATE INDEX NG_ITRM ON NAMEDGRAPHS (ID,HEND,COMMITTED,HSTART,REVISION,METAID);; CREATE INDEX NG_MH ON NAMEDGRAPHS (METAID,HEND,HSTART, ID);; CREATE INDEX NG_C ON NAMEDGRAPHS (COMMITTED);; CREATE INDEX NG_RHI ON NAMEDGRAPHS(REVISION,HSTART,ID);; CREATE INDEX NG_UUID ON NAMEDGRAPHS(UUID,HEND,ID);; CREATE INDEX NG_LM ON NAMEDGRAPHS(LASTMODIFIEDBY);; CREATE INDEX NG_IHR_NR ON NAMEDGRAPHS_NR (ID,COMMITTED,HSTART,REVISION);; CREATE INDEX NG_M_NR ON NAMEDGRAPHS_NR (METAID);; CREATE INDEX NG_RH_NR ON NAMEDGRAPHS_NR(REVISION,HSTART);; CREATE INDEX NG_UUIDR ON NAMEDGRAPHS_NR(UUID,ID);; CREATE INDEX NG_LMR ON NAMEDGRAPHS_NR(LASTMODIFIEDBY);; CREATE INDEX NG_C_NR ON NAMEDGRAPHS_NR (COMMITTED);; CREATE INDEX LTT ON LASTTRANSACTIONTIME (ID,COMMITED);; CREATE INDEX LTT4 ON LASTTRANSACTIONTIME (COMMITED,ID);; CREATE INDEX TID ON TRANSACTIONTIME (ID,COMMITED);; CREATE INDEX TCIU ON TRANSACTIONTIME (COMMITED,ID,URI);; CREATE INDEX TCSID ON TRANSACTIONTIME(SERVERID,COMMITED);; CREATE UNIQUE INDEX {0}_U_V ON {0}_U(VALUE);; CREATE INDEX {0}_U_RI ON {0}_U(REF DESC,ID);; CREATE INDEX {0}_U_RV ON {0}_U(REF ,VALUE,ID);; CREATE INDEX {0}_LU_V ON {0}_LU(HASH,ID);; CREATE INDEX {0}_LU_RI ON {0}_LU(REF DESC,ID);; CREATE UNIQUE INDEX {0}_L_V ON {0}_L(VALUE,MODIFIER_ID);; CREATE INDEX {0}_L_RI ON {0}_L(REF DESC,ID);; CREATE INDEX {0}_L_RV ON {0}_L(REF,MODIFIER_ID ,VALUE,ID);; CREATE UNIQUE INDEX {0}_TL_V ON {0}_TL(VALUE,MODIFIER_ID);; CREATE INDEX {0}_TL_RI ON {0}_TL(REF DESC,ID);; CREATE INDEX {0}_TL_RV ON {0}_TL(REF ,MODIFIER_ID,VALUE,ID);; CREATE INDEX {0}_LL_V ON {0}_LL(HASH,MODIFIER_ID);; CREATE INDEX {0}_LL_RI ON {0}_LL(REF DESC,ID);; CREATE INDEX {0}_LTL_V ON {0}_LTL(HASH,MODIFIER_ID);; CREATE INDEX {0}_LTL_RI ON {0}_LTL(REF DESC,ID);; CREATE UNIQUE INDEX {0}_B_V ON {0}_B(VALUE);; CREATE INDEX {0}_B_RI ON {0}_B(REF DESC,ID);; CREATE INDEX {0}_B_RV ON {0}_B(REF ,VALUE,ID);; CREATE INDEX {0}_UIDS_TI ON  {0}_USED_IDS(TRANSACTIONID,ID)   {1};; CREATE INDEX {0}_UIDS_IT ON  {0}_USED_IDS(ID,TRANSACTIONID)   {1};; CREATE UNIQUE INDEX LOCKEDS ON LOCKED_GRAPHS(TRANSACTIONID,ID);; CREATE UNIQUE INDEX LOCKEDID ON LOCKED_GRAPHS(ID);; CREATE UNIQUE INDEX QG_DSID_ID ON QUERY_GRAPHS(DSID,ID);; CREATE UNIQUE INDEX {0}_DATATYPE_VI ON {0}_DATATYPE(VALUE,ID)  {1};; CREATE UNIQUE INDEX {0}_DATATYPE_IV ON {0}_DATATYPE(ID,VALUE)  {1};; CREATE UNIQUE INDEX {0}_LANGUAGE_VI ON {0}_LANGUAGE(VALUE,ID)  {1};; CREATE UNIQUE INDEX {0}_LANGUAGE_IV ON {0}_LANGUAGE(ID,VALUE)  {1} ;; 
initSequences=CREATE SEQUENCE NODE_SEQ_0  START WITH 1 INCREMENT BY 1 MAXVALUE 1152921504606846975 CACHE 20000;; CREATE SEQUENCE NODE_SEQ_1  START WITH 1152921504606846977 INCREMENT BY 1 MAXVALUE 2305843009213693951 CACHE 20000;; CREATE SEQUENCE NODE_SEQ_2  START WITH 2305843009213693953 INCREMENT BY 1 MAXVALUE 3458764513820540927 CACHE 20000;; CREATE SEQUENCE NODE_SEQ_3  START WITH 3458764513820540929 INCREMENT BY 1 MAXVALUE 4611686018427387903 CACHE 20000;; CREATE SEQUENCE NODE_SEQ_4  START WITH 4611686018427387905 INCREMENT BY 1 MAXVALUE 5764607523034234879 CACHE 20000;; CREATE SEQUENCE NODE_SEQ_5  START WITH 5764607523034234881 INCREMENT BY 1 MAXVALUE 6917529027641081855 CACHE 20000;; CREATE SEQUENCE NODE_SEQ_6  START WITH 6917529027641081857 INCREMENT BY 1 MAXVALUE 8070450532247928831 CACHE 20000;; CREATE SEQUENCE DATATYPE_SEQ START WITH 1 INCREMENT BY 1 CACHE 20000;; CREATE SEQUENCE LANG_SEQ    START WITH 1 INCREMENT BY 1 CACHE 20000;; 
dropTables=DROP TABLE {0}_B;; DROP TABLE {0}_L;; DROP TABLE {0}_LL;; DROP TABLE {0}_TL;; DROP TABLE {0}_LTL;; DROP TABLE {0}_LU;; DROP TABLE {0}_U;; DROP TABLE {0}_DATATYPE;; DROP TABLE {0}_LANGUAGE;; DROP VIEW NAMEDGRAPHMODVIEW;; DROP TABLE NAMEDGRAPHS;; DROP TABLE NAMEDGRAPHS_NR;; DROP TABLE LASTTRANSACTIONTIME;; DROP TABLE TRANSACTIONTIMES;; DROP TABLE STATEMENTS;; DROP TABLE STATEMENTS_NR;; DROP TABLE LOCKED_GRAPHS;; DROP TABLE QUERY_GRAPHS;; DROP TABLE GLITTERUNIT;; 
initServerTables=CREATE TABLE SERVER ( ID                  {6} NOT NULL, VERSION     {6} NOT NULL, INITIALIZED    {6} );; CREATE INDEX SERVERIVL ON SERVER (ID,VERSION,INITIALIZED);; CREATE INDEX SERVERIL ON SERVER(ID,INITIALIZED);; CREATE INDEX SERVERL ON SERVER(INITIALIZED);; INSERT INTO SERVER (ID,VERSION) VALUES(0,12);; 
initTablespace=
createTemporaryTables=CREATE LOCAL TEMPORARY TABLE DEFAULTGRAPHS_TMP ( ID {6} NOT NULL ) ON COMMIT PRESERVE ROWS;; CREATE INDEX DEFAULTGRAPHS_IDX ON DEFAULTGRAPHS_TMP (ID);; CREATE LOCAL TEMPORARY TABLE NAMEDGRAPHS_TMP ( ID {6} NOT NULL ) ON COMMIT PRESERVE ROWS;; CREATE INDEX NAMEDGRAPHS_IDX ON NAMEDGRAPHS_TMP (ID);; CREATE LOCAL TEMPORARY TABLE TEMPGRAPHS ( ID {6} NOT NULL ) ON COMMIT PRESERVE ROWS;; CREATE INDEX TEMPGRAPHS_IDX ON TEMPGRAPHS (ID);; CREATE LOCAL TEMPORARY TABLE TEMP_COLUMNS( C0    {6}, C1    {6}, C2    {6}, C3    {6}, C4    {6}, C5    {6}, C6    {6}, C7    {6}, C8    {6}, C9    {6}, C10    {6}, C11    {6}, C12    {6}, C13    {6}, C14    {6}, C15    {6} )ON COMMIT PRESERVE ROWS;; CREATE LOCAL TEMPORARY TABLE TEMP_CONSTRAINT0( ID    {6} )ON COMMIT PRESERVE ROWS;; CREATE INDEX CONSTRAINT0_IDX ON TEMP_CONSTRAINT0 (ID);; CREATE LOCAL TEMPORARY TABLE TEMP_CONSTRAINT1( ID    {6} )ON COMMIT PRESERVE ROWS;; CREATE INDEX CONSTRAINT1_IDX ON TEMP_CONSTRAINT1 (ID);; CREATE LOCAL TEMPORARY TABLE TEMP_CONSTRAINT2( ID    {6} )ON COMMIT PRESERVE ROWS;; CREATE INDEX CONSTRAINT2_IDX ON TEMP_CONSTRAINT2 (ID);; CREATE LOCAL TEMPORARY TABLE TEMP_CONSTRAINT3( ID    {6} )ON COMMIT PRESERVE ROWS;; CREATE INDEX CONSTRAINT3_IDX ON TEMP_CONSTRAINT3 (ID);; CREATE LOCAL TEMPORARY TABLE NGR_TMP( ID     {6}, METAID   {6}, REVISION   {6}, NEW_REVISION {6}, UUID   {6} ) ON COMMIT PRESERVE ROWS ;; CREATE LOCAL TEMPORARY TABLE STMTS_REP_TMP ( ID     {7}({4}) {3} NOT NULL, NAMEDGRAPHID  {6}, SUBJECT       {6}, PREDICATE     {6}, OBJECT        {6}, RSTART    {6}, REND    {6} ) ON COMMIT PRESERVE ROWS ;; CREATE INDEX SRT_1 ON STMTS_REP_TMP(REND,NAMEDGRAPHID);; CREATE LOCAL TEMPORARY TABLE SUBJECT_IDS_TEMP ( ID  {6} ) ON COMMIT DELETE ROWS;; CREATE LOCAL TEMPORARY TABLE PREDICATE_IDS_TEMP ( ID  {6} ) ON COMMIT DELETE ROWS;; CREATE LOCAL TEMPORARY TABLE OBJECT_IDS_TEMP ( ID  {6} ) ON COMMIT DELETE ROWS;; CREATE LOCAL TEMPORARY TABLE NAMEDGRAPH_IDS_TEMP ( ID  {6} ) ON COMMIT DELETE ROWS;; CREATE LOCAL TEMPORARY TABLE ID_TMP ( ID  {6}, ENTRYID {6}, TYPE  {5} ) ON COMMIT PRESERVE ROWS;; CREATE LOCAL TEMPORARY TABLE RES_TMP ( ENTRYID {6}, VALUE {7}({4}) {3} ) ON COMMIT PRESERVE ROWS;; CREATE INDEX RES_TMP1 ON RES_TMP(VALUE,ENTRYID);; CREATE LOCAL TEMPORARY TABLE LIT_TMP ( ENTRYID {6}, VALUE  {7}({4}) {3}, MODIFIER_ID {6} ) ON COMMIT PRESERVE ROWS;; CREATE INDEX LIT_TMP1 ON LIT_TMP(VALUE,MODIFIER_ID,ENTRYID);; CREATE LOCAL TEMPORARY TABLE STMTS_TMP ( OPERATION   {5} NOT NULL, ID     {7}({4}) {3} NOT NULL, STMTID    {6} NOT NULL, METADATA   {5} NOT NULL, UUID    {6} NOT NULL, NAMEDGRAPHID  {6} NOT NULL, SUBJECT       {6} NOT NULL, PREDICATE     {6} NOT NULL, OBJECT           {6} NOT NULL, REVISION   {6} , COMMITTED   {6} NOT NULL ) ON COMMIT PRESERVE ROWS;; CREATE INDEX STMTS1 ON STMTS_TMP(OPERATION,ID);; CREATE INDEX STMTS2 ON STMTS_TMP(STMTID,ID);; CREATE INDEX STMTS3 ON STMTS_TMP(STMTID,OPERATION);; CREATE LOCAL TEMPORARY TABLE STMT_ID_TMP ( ID     {7}({4}) {3} NOT NULL, STMTID    {6} NOT NULL ) ON COMMIT PRESERVE ROWS;; CREATE INDEX STMT_ID_1 ON STMT_ID_TMP(STMTID,ID);; CREATE LOCAL TEMPORARY TABLE REMOVE_GRAPHS_TMP ( ID     {6} NOT NULL, TYPE    {5} NOT NULL, REND    {6} NOT NULL ) ON COMMIT PRESERVE ROWS;; CREATE INDEX RG_ID ON REMOVE_GRAPHS_TMP(TYPE,ID,REND);; 
2To3=CREATE TABLE {0}_USED_IDS ( ID            {6} NOT NULL, TRANSACTIONID {6} NOT NULL )  {2};; ALTER TABLE TRANSACTIONTIME ADD SERVERID {7}({4}) {3};; ALTER TABLE LOCKED_GRAPHS ADD TRANSACTIONID {6};; CREATE INDEX {0}_UIDS_TI ON  {0}_USED_IDS(TRANSACTIONID,ID)   {1};; CREATE INDEX {0}_UIDS_IT ON  {0}_USED_IDS(ID,TRANSACTIONID)   {1};; CREATE UNIQUE INDEX LOCKEDS ON LOCKED_GRAPHS(TRANSACTIONID,ID);; CREATE INDEX TCSID ON TRANSACTIONTIME(SERVERID,COMMITED);; UPDATE ANZO_U SET VALUE='http://openanzo.org/ontologies/2008/07/Anzo#datasource' WHERE VALUE='http://openanzo.org/predicates/datasource';; UPDATE ANZO_U SET VALUE='http://openanzo.org/ontologies/2008/07/Anzo#hasMetadataGraph' WHERE VALUE='http://openanzo.org/predicates/hasMetadataGraph';; UPDATE ANZO_U SET VALUE='http://openanzo.org/ontologies/2008/07/Anzo#revisioned' WHERE VALUE='http://openanzo.org/predicates/revisioned';; UPDATE ANZO_U SET VALUE='http://openanzo.org/ontologies/2008/07/Anzo#persisted' WHERE VALUE='http://openanzo.org/predicates/persisted';; UPDATE ANZO_U SET VALUE='http://openanzo.org/ontologies/2008/07/Anzo#uuid' WHERE VALUE='http://openanzo.org/predicates/uuid';; UPDATE ANZO_U SET VALUE='http://openanzo.org/ontologies/2008/07/Anzo#Dataset' WHERE VALUE='http://openanzo.org/types/Dataset';; UPDATE ANZO_U SET VALUE='http://openanzo.org/ontologies/2008/07/Anzo#NamedGraph' WHERE VALUE='http://openanzo.org/types/NamedGraph';; UPDATE ANZO_U SET VALUE='http://openanzo.org/ontologies/2008/07/Anzo#namedGraph' WHERE VALUE='http://openanzo.org/predicates/namedGraph';; UPDATE ANZO_U SET VALUE='http://openanzo.org/ontologies/2008/07/Anzo#createdBy' WHERE VALUE='http://openanzo.org/predicates/createdBy';; UPDATE ANZO_U SET VALUE='http://openanzo.org/ontologies/2008/07/Anzo#lastModifiedByUser' WHERE VALUE='http://openanzo.org/predicates/lastModifiedByUser';; UPDATE ANZO_U SET VALUE='http://openanzo.org/ontologies/2008/07/Anzo#modified' WHERE VALUE='http://openanzo.org/predicates/modified';; UPDATE ANZO_U SET VALUE='http://openanzo.org/ontologies/2008/07/Anzo#revision' WHERE VALUE='http://openanzo.org/predicates/revision';; UPDATE ANZO_U SET VALUE='http://openanzo.org/ontologies/2008/07/Anzo#canBeAddedToBy' WHERE VALUE='http://openanzo.org/RBAC#canBeAddedToBy';; UPDATE ANZO_U SET VALUE='http://openanzo.org/ontologies/2008/07/Anzo#canBeReadBy' WHERE VALUE='http://openanzo.org/RBAC#canBeReadBy';; UPDATE ANZO_U SET VALUE='http://openanzo.org/ontologies/2008/07/Anzo#canBeRemovedFromBy' WHERE VALUE='http://openanzo.org/RBAC#canBeRemovedFromBy';; 
3To4=CREATE TABLE QUERY_GRAPHS( ID   {6} NOT NULL, DSID  {6} NOT NULL, SERVERID {7}({4}) {3} NOT NULL, PRIMARY KEY (ID,DSID) );; CREATE UNIQUE INDEX QG_DSID_ID ON QUERY_GRAPHS(DSID,ID);; CREATE INDEX QG_SERVERID ON QUERY_GRAPHS(SERVERID);; 
4To5=CREATE TABLE {0}_TL ( ID          {6} NOT NULL, VALUE       {7}({4}) {3}, MODIFIER_ID {6}  NOT NULL, REF   {6} NOT NULL, PRIMARY KEY(ID) )  {2};; CREATE UNIQUE INDEX {0}_TL_V ON {0}_TL(VALUE,MODIFIER_ID);; CREATE INDEX {0}_TL_RI ON {0}_TL(REF,ID);; CREATE TABLE {0}_LTL ( ID   {6} NOT NULL, HASH  {6} NOT NULL, VALUE  {8}, MODIFIER_ID {6}, REF   {6} NOT NULL, PRIMARY KEY (ID) ) {2};; CREATE INDEX {0}_LTL_V ON {0}_LTL(HASH,MODIFIER_ID);; CREATE INDEX {0}_LTL_RI ON {0}_LTL(REF,ID);; CREATE TABLE {0}_DATATYPE ( ID   {9}, VALUE  {7}({4}) {3}, PRIMARY KEY(ID) )  {2} ;; CREATE TABLE {0}_LANGUAGE ( ID   {9}, VALUE  {7}({4}) {3}, PRIMARY KEY(ID) )  {2};; INSERT INTO {0}_TL(ID,VALUE,MODIFIER_ID,REF) SELECT ID,VALUE,MODIFIER_ID,REF FROM {0}_L WHERE ID >= 4611686018427387905 AND ID < 5764607523034234879;; DELETE FROM {0}_L WHERE ID >= 4611686018427387905 AND ID < 5764607523034234879;; INSERT INTO {0}_LTL(ID,HASH,VALUE,MODIFIER_ID,REF) SELECT ID,HASH,VALUE,MODIFIER_ID,REF FROM {0}_LL WHERE ID >= 5764607523034234881 AND ID < 6917529027641081855;; DELETE FROM {0}_LL WHERE ID >=  5764607523034234881 AND MODIFIER_ID < 6917529027641081855;; INSERT INTO {0}_DATATYPE (VALUE) SELECT VALUE FROM LIT_DATATYPE;; INSERT INTO {0}_LANGUAGE (VALUE) SELECT VALUE FROM LIT_LANGUAGE;; UPDATE {0}_L SET MODIFIER_ID=(SELECT {0}_LANGUAGE.ID FROM {0}_LANGUAGE,LIT_LANGUAGE WHERE {0}_LANGUAGE.VALUE=LIT_LANGUAGE.VALUE AND LIT_LANGUAGE.ID=MODIFIER_ID) WHERE MODIFIER_ID !=0;; UPDATE {0}_LL SET MODIFIER_ID=(SELECT {0}_LANGUAGE.ID FROM {0}_LANGUAGE,LIT_LANGUAGE WHERE {0}_LANGUAGE.VALUE=LIT_LANGUAGE.VALUE AND LIT_LANGUAGE.ID=MODIFIER_ID) WHERE MODIFIER_ID !=0;; UPDATE {0}_TL SET MODIFIER_ID=(SELECT {0}_DATATYPE.ID FROM {0}_DATATYPE,LIT_DATATYPE WHERE {0}_DATATYPE.VALUE=LIT_DATATYPE.VALUE AND LIT_DATATYPE.ID=MODIFIER_ID) WHERE MODIFIER_ID !=0;; UPDATE {0}_LTL SET MODIFIER_ID=(SELECT {0}_DATATYPE.ID FROM {0}_DATATYPE,LIT_DATATYPE WHERE {0}_DATATYPE.VALUE=LIT_DATATYPE.VALUE AND LIT_DATATYPE.ID=MODIFIER_ID) WHERE MODIFIER_ID !=0;; DROP TABLE LIT_DATATYPE;; DROP TABLE LIT_LANGUAGE;; DROP SEQUENCE NODE_SEQ_7;; DROP SEQUENCE NODE_SEQ_8;; DROP SEQUENCE NODE_SEQ_9;; DROP SEQUENCE TRANSACTION_SEQ;; DROP SEQUENCE STMT_REV_SEQ;; 
5To6=ALTER TABLE STATEMENTS ADD COLUMN UUID {6};; CREATE INDEX SRUUID ON STATEMENTS (UUID);; UPDATE STATEMENTS SET UUID=(SELECT DISTINCT UUID FROM NAMEDGRAPHS WHERE NAMEDGRAPHS.HEND IS NULL AND (NAMEDGRAPHS.ID=STATEMENTS.NAMEDGRAPHID OR NAMEDGRAPHS.METAID=STATEMENTS.NAMEDGRAPHID));; ALTER TABLE STATEMENTS ALTER COLUMN UUID SET NOT NULL;; 
5To6more=
6To7=ALTER TABLE SERVER DROP COLUMN INITIALIZED;; ALTER TABLE SERVER ADD COLUMN INITIALIZED {6};; UPDATE SERVER SET INITIALIZED=1;; 
6To7more=
7To8=
7To8more=ALTER TABLE {0}_DATATYPE ALTER ID TYPE {6};; ALTER TABLE {0}_LANGUAGE ALTER ID TYPE {6};; CREATE SEQUENCE LANG_SEQ    START WITH 1 INCREMENT BY 1 CACHE 20000;; CREATE SEQUENCE DATATYPE_SEQ  START WITH 1 INCREMENT BY 1 CACHE 20000;; 
8To9=DROP INDEX QG_SERVERID;; ALTER TABLE QUERY_GRAPHS DROP COLUMN SERVERID;; 
8To9more=
10To11=
10To11more=
11To12=CREATE VIEW ALL_LITERALS_VIEW (ID,VALUE,MODIFIER_ID,REF) AS SELECT L.ID,L.VALUE,L.MODIFIER_ID,L.REF FROM ANZO_L L WHERE L.REF=0 UNION SELECT TL.ID,TL.VALUE,TL.MODIFIER_ID,TL.REF FROM ANZO_TL TL WHERE TL.REF=0;; 
node.updateExistingLiteralsReferenceCount=UPDATE {2} SET REF=REF+1 WHERE REF>0 AND EXISTS (SELECT {0}{1}.VALUE FROM {0}{1} WHERE {0}{1}.VALUE={2}.VALUE AND {0}{1}.MODIFIER_ID={2}.MODIFIER_ID)
node.selectAllResolvedIds=SELECT {0}{1}.ENTRYID,{0}{1}.ID FROM {0}{1}
node.resolveIdsLiteral=SELECT {2}.ID,{2}.VALUE,{2}.MODIFIER_ID FROM {2},{0}{1} WHERE {2}.ID ={0}{1}.ID AND {0}{1}.ID>=? AND {0}{1}.ID < ?
node.deleteUncommittedReferences=DELETE FROM {1} WHERE REF=1 AND EXISTS (SELECT {0}.ID FROM {0} WHERE {0}.TRANSACTIONID=? AND {1}.ID={0}.ID)
node.storeResolveLiteral=INSERT INTO {0}{1} (ENTRYID,VALUE,MODIFIER_ID) VALUES(?,?,?)
node.fetchNodeID=SELECT ID FROM {0} WHERE VALUE = ? {1}
node.fetchLongNodeID=SELECT ID,VALUE FROM {0} WHERE HASH = ?
node.purge=DELETE FROM {0} WHERE TRANSACTIONID=?
node.resolveLiterals=SELECT {2}.ID,{2}.VALUE,{2}.MODIFIER_ID FROM {2},{0}{1} WHERE {2}.VALUE={0}{1}.VALUE AND {2}.MODIFIER_ID = {0}{1}.MODIFIER_ID
node.purgeResolvedLiterals=DELETE FROM {0}{1} WHERE ENTRYID IN (SELECT {0}{2}.ENTRYID FROM {0}{2})
node.insertCommonValueWithIdentity=INSERT INTO {0} ( VALUE) VALUES( ?) RETURNING ID
node.resolveNodes=SELECT {2}.ID,{2}.VALUE FROM {2},{0}{1} WHERE {2}.VALUE={0}{1}.VALUE
node.insertCommonValue=INSERT INTO {0} (ID, VALUE) VALUES(?, ?)
node.storeResolveLiteralLong=INSERT INTO {0}{1} (VALUE,HASH,MODIFIER_ID) VALUES(?,?,?)
node.updateExistingUrisReferenceCount=UPDATE {2} SET REF=REF+1 WHERE REF>0 AND VALUE IN (SELECT {0}{1}.VALUE FROM {0}{1})
node.insertUncommittedReferences=INSERT INTO {2} (ID,TRANSACTIONID) SELECT {0}{1}.ID,{3} FROM {0}{1} WHERE {0}{1}.TYPE IN (1,3)
node.findNodeID=SELECT ID FROM {0} WHERE (MODIFIER_ID=0 OR MODIFIER_ID=?) AND VALUE LIKE ? {1}
node.storeBulkLiteral=INSERT INTO {0}{1} (ID, VALUE, MODIFIER_ID) VALUES(?, ?, ?)
node.fetchCommonValueID=SELECT ID FROM {0} WHERE VALUE = ? {1}
node.purgeResolvedUris=DELETE FROM {0}{1} WHERE ENTRYID IN (SELECT {0}{2}.ENTRYID FROM {0}{2})
node.resolveTransactedIdsLiteral=SELECT {2}.ID,{2}.VALUE,{2}.MODIFIER_ID FROM {2},{0}{1} WHERE {0}{1}.TRANSACTIONID=? AND {2}.ID ={0}{1}.ID AND {0}{1}.ID>=? AND {0}{1}.ID < ?
node.storeResolveId=INSERT INTO {0}{1} (ID) VALUES(?)
node.resolveExistingLiterals=INSERT INTO {0}{2} (ENTRYID,ID,TYPE) SELECT T.ENTRYID,N.ID,2 FROM {0}{1} T,{3} N WHERE N.VALUE=T.VALUE AND N.MODIFIER_ID=T.MODIFIER_ID AND N.REF=0
node.fetchLiteralNodeID=SELECT ID FROM {0} WHERE VALUE = ? AND MODIFIER_ID = ? {1}
node.storeBulkLongNode=INSERT INTO {0}{1} (ID, HASH, VALUE) VALUES(?, ?, ?)
node.fetchLongLiteralNodeID=SELECT ID,VALUE FROM {0} WHERE HASH = ? AND MODIFIER_ID = ?
node.countTempTable=SELECT COUNT(1) FROM {0}{1}
node.storeBulkLongLiteral=INSERT INTO {0}{1} (ID, VALUE, HASH, MODIFIER_ID) VALUES(?, ?, ?, ?)
node.storeBulkNode=INSERT INTO {0}{1} (ID, VALUE) VALUES(?, ?)
node.fetchCommonValue=SELECT VALUE FROM {0} WHERE ID = ? {1}
node.insertUnresolvedUris=INSERT INTO {2} (ID,VALUE,REF) SELECT (NEXTVAL(''{3}'')),VALUE,1 FROM {0}{1}
node.fetchNodeValue=SELECT VALUE FROM {0} WHERE ID = ? {1}
node.updateUnResolvedIds=UPDATE {0}{1} AS A SET TYPE=1,ID=NEXTVAL(''{1}'') WHERE A.ID IS NULL
node.fetchLiteralNodeValue=SELECT VALUE, MODIFIER_ID FROM {0} WHERE ID = ? {1}
node.insertLockedId=INSERT INTO {0} (ID,TRANSACTIONID) VALUES(?,?)
node.updateResolvedUris=UPDATE {0}{1} AS A SET TYPE=2,ID=(SELECT {2}.ID FROM {2} WHERE {2}.VALUE=A.VALUE AND {2}.REF=0) WHERE EXISTS (SELECT {2}.ID FROM {2} WHERE {2}.VALUE=A.VALUE AND {2}.REF=0)
node.resolveIdsUri=SELECT {2}.ID,{2}.VALUE FROM {2},{0}{1} WHERE {2}.ID={0}{1}.ID AND {0}{1}.ID>=? AND {0}{1}.ID < ?
node.resolveTransactedIdsUri=SELECT {2}.ID,{2}.VALUE FROM {2},{0}{1} WHERE {0}{1}.TRANSACTIONID=? AND {2}.ID={0}{1}.ID AND {0}{1}.ID>=? AND {0}{1}.ID < ?
node.fetchAllCommonValues=SELECT ID, VALUE FROM {0}
node.getAllLiterals=SELECT ID,MODIFIER_ID,VALUE FROM {0} {1}
node.storeResolveNodeLong=INSERT INTO {0}{1} (VALUE,HASH) VALUES(?,?)
node.insertUnresolvedLiterals=INSERT INTO {2} (ID,VALUE,MODIFIER_ID,REF) SELECT (NEXTVAL(''{3}'')),VALUE,MODIFIER_ID,1 FROM {0}{1}
node.storeResolveNode=INSERT INTO {0}{1} (ENTRYID,VALUE) VALUES(?,?)
node.resolveExistingUncommittedUris=INSERT INTO {0}{2} (ENTRYID,ID,TYPE) SELECT T.ENTRYID,N.ID,3 FROM {0}{1} T,{3} N WHERE N.VALUE=T.VALUE AND N.REF>0
node.commitUncommittedReferences=UPDATE {1} SET REF=0 WHERE EXISTS (SELECT {0}.ID FROM {0} WHERE {0}.TRANSACTIONID=? AND {1}.ID={0}.ID) AND REF>0
node.decrementUncommittedReferences=UPDATE {1} SET REF=REF-1 WHERE REF>1 AND EXISTS (SELECT {0}.ID FROM {0} WHERE {0}.TRANSACTIONID=? AND {1}.ID={0}.ID)
node.resolveExistingUncommittedLiterals=INSERT INTO {0}{2} (ENTRYID,ID,TYPE) SELECT T.ENTRYID,N.ID,3 FROM {0}{1} T,{3} N WHERE N.VALUE=T.VALUE AND N.MODIFIER_ID=T.MODIFIER_ID AND N.REF>0
node.resolveExistingUris=INSERT INTO {0}{2} (ENTRYID,ID,TYPE) SELECT T.ENTRYID,N.ID,2 FROM {0}{1} T,{3} N WHERE N.VALUE=T.VALUE AND N.REF=0
base.removeRowsFromTable=DELETE FROM {0} WHERE (GraphID = ?)
base.clearTableWithSessionPrefix=DELETE FROM {0}{1}
base.insertGraph=INSERT INTO {0} (Name) VALUES (?)
base.getRowCount=SELECT COUNT(1) FROM {0}
base.unlockTable=
base.dropTable=DROP TABLE {0}
base.dropView=DROP VIEW {0}
base.truncateTableWithSessionMayCommit=TRUNCATE TABLE {0}{1}
base.clearTable=DELETE FROM {0}
base.truncateTableMayCommit=TRUNCATE TABLE {0}
base.lockTable=LOCK TABLE {0} {1}
with-sequences.insertLongNode=INSERT INTO {0} (ID, HASH, VALUE) VALUES(NEXTVAL(''{1}''), ?, ?) RETURNING ID
with-sequences.insertLiteral=INSERT INTO {0} (ID, VALUE, MODIFIER_ID) VALUES(NEXTVAL(''{1}''), ?, ?) RETURNING ID
with-sequences.insertLongLiteral=INSERT INTO {0} (ID, HASH, VALUE, MODIFIER_ID) VALUES(NEXTVAL(''{1}''), ?, ?, ?) RETURNING ID
with-sequences.getNodeID=VALUES (NEXTVAL(''{0}''))
with-sequences.insertNode=INSERT INTO {0} (id, value) VALUES(NEXTVAL(''{1}''), ?) RETURNING ID
no-sequences.insertLiteral=INSERT INTO {0} (ID, VALUE, MODIFIER_ID,REF) VALUES(?, ?, ?,0)
no-sequences.updateNodeID=UPDATE {0} SET ID = ?
no-sequences.insertNode=INSERT INTO {0} (ID, VALUE,REF) VALUES(?, ?,0)
no-sequences.insertLongNode=INSERT INTO {0} (ID, HASH, VALUE,REF) VALUES(?, ?, ?,0)
no-sequences.insertNodeWithIdentity=INSERT INTO {0} (VALUE,REF) VALUES( ?,0)
no-sequences.insertLongNodeWithIdentity=INSERT INTO {0} ( HASH, VALUE,REF) VALUES(?, ?,0)
no-sequences.insertLongLiteralWithIdentity=INSERT INTO {0} ( HASH, VALUE, MODIFIER_ID,REF) VALUES( ?, ?, ?,0)
no-sequences.insertCommonValue=INSERT INTO {0} (VALUE) VALUES(?)
no-sequences.insertLiteralWithIdentity=INSERT INTO {0} (VALUE, MODIFIER_ID,REF) VALUES( ?, ?,0)
no-sequences.insertLongLiteral=INSERT INTO {0} (ID, HASH, VALUE, MODIFIER_ID,REF) VALUES(?, ?, ?, ?,0)
no-sequences.selectNodeID=SELECT ID FROM {0}
Replication.selectNewStatementsNR=SELECT S.NAMEDGRAPHID,S.SUBJECT,S.PREDICATE,S.OBJECT FROM STATEMENTS_NR S,{0}NGR_TMP NG WHERE S.COMMITTED<=0 AND (S.NAMEDGRAPHID=NG.ID OR S.NAMEDGRAPHID=NG.METAID) ORDER BY NAMEDGRAPHID
Replication.updateNamedGraphNRNewRevisions=UPDATE {0}NGR_TMP SET NEW_REVISION=( SELECT NAMEDGRAPHS_NR.REVISION FROM NAMEDGRAPHS_NR WHERE NAMEDGRAPHS_NR.ID={0}NGR_TMP.ID AND NAMEDGRAPHS_NR.COMMITTED=0 ), UUID=( SELECT NAMEDGRAPHS_NR.UUID FROM NAMEDGRAPHS_NR WHERE NAMEDGRAPHS_NR.ID={0}NGR_TMP.ID AND NAMEDGRAPHS_NR.COMMITTED=0 ) WHERE EXISTS (SELECT NAMEDGRAPHS_NR.ID FROM NAMEDGRAPHS_NR WHERE NAMEDGRAPHS_NR.ID={0}NGR_TMP.ID)
Replication.purgeNonChangedNamedGraphEntries=DELETE FROM {0}NGR_TMP WHERE EXISTS(SELECT NG.REVISION FROM NAMEDGRAPHS NG WHERE NG.ID={0}NGR_TMP.ID AND NG.REVISION={0}NGR_TMP.REVISION AND ((NG.HEND IS NULL AND NG.COMMITTED=0) OR (NG.HEND IS NOT NULL AND NG.COMMITTED>0)))
Replication.updateNamedGraphNewRevisions=UPDATE {0}NGR_TMP SET NEW_REVISION=( SELECT NAMEDGRAPHS.REVISION FROM NAMEDGRAPHS WHERE NAMEDGRAPHS.ID={0}NGR_TMP.ID AND ( (NAMEDGRAPHS.HEND IS NULL AND NAMEDGRAPHS.COMMITTED=0) OR (NAMEDGRAPHS.HEND IS NOT NULL AND NAMEDGRAPHS.COMMITTED>0) ) ), UUID=( SELECT NAMEDGRAPHS.UUID FROM NAMEDGRAPHS WHERE NAMEDGRAPHS.ID={0}NGR_TMP.ID AND ( (NAMEDGRAPHS.HEND IS NULL AND NAMEDGRAPHS.COMMITTED=0) OR (NAMEDGRAPHS.HEND IS NOT NULL AND NAMEDGRAPHS.COMMITTED>0) ) ) WHERE EXISTS (SELECT NAMEDGRAPHS.ID FROM NAMEDGRAPHS WHERE NAMEDGRAPHS.ID={0}NGR_TMP.ID)
Replication.insertDeltaNRStatements=INSERT INTO {0}STMTS_REP_TMP(ID,NAMEDGRAPHID,SUBJECT,PREDICATE,OBJECT) SELECT S.ID,S.NAMEDGRAPHID,S.SUBJECT,S.PREDICATE,S.OBJECT FROM STATEMENTS_NR S WHERE S.COMMITTED=0 AND S.NAMEDGRAPHID IN (SELECT ID FROM {0}NGR_TMP WHERE REVISION>-1 UNION SELECT METAID FROM {0}NGR_TMP WHERE REVISION>-1)
Replication.insertDeltaStatements=INSERT INTO {0}STMTS_REP_TMP SELECT S.ID,S.NAMEDGRAPHID,S.SUBJECT,S.PREDICATE,S.OBJECT,S.RSTART,S.REND FROM STATEMENTS S,{0}NGR_TMP NG WHERE NG.REVISION > -1 AND S.COMMITTED=0 AND S.UUID=NG.UUID AND ((S.RSTART>NG.REVISION AND S.REND IS NULL) OR (S.RSTART<=NG.REVISION AND S.REND>NG.REVISION))
Replication.selectAllNamedGraphs=SELECT ID,UUID,REVISION,NEW_REVISION FROM {0}NGR_TMP WHERE REVISION IS NULL OR NEW_REVISION IS NULL
Replication.insertNamedGraphRevision=INSERT INTO {0}NGR_TMP (ID,METAID,REVISION) VALUES (?,?,?)
Replication.selectUniqueIds=SELECT SUBJECT FROM {0}{1} UNION SELECT PREDICATE FROM {0}{2} UNION SELECT NAMEDGRAPHID FROM {0}{3} UNION SELECT OBJECT FROM {0}{4}
Replication.selectAllStatement=SELECT NAMEDGRAPHID,REND,SUBJECT,PREDICATE,OBJECT FROM {0}STMTS_REP_TMP ORDER BY NAMEDGRAPHID,REND
Replication.selectNewStatements=SELECT S.NAMEDGRAPHID,S.SUBJECT,S.PREDICATE,S.OBJECT FROM STATEMENTS S,{0}NGR_TMP NG WHERE S.COMMITTED<=0 AND S.UUID=NG.UUID AND ((S.RSTART>NG.REVISION AND S.REND IS NULL) OR (S.RSTART<=NG.REVISION AND S.REND>NG.REVISION)) ORDER BY NAMEDGRAPHID,REND
Replication.selectUniqueUris=SELECT DISTINCT {0}_U.ID,{0}_U.VALUE FROM {0}_U WHERE {0}_U.ID IN (SELECT ID FROM {1}NAMEDGRAPHIDS UNION SELECT SUBJ FROM {1}{2} UNION SELECT PREDICATE FROM {1}{3} UNION SELECT NAMEDGRAPHID FROM {1}{4} UNION SELECT OBJ FROM {1}{5})
Replication.insertNamedGraphNewRevisions=INSERT INTO {1}NGR_TMP (ID,METAID,NEW_REVISION,UUID,REVISION) SELECT NAMEDGRAPHS.ID,NAMEDGRAPHS.METAID,NAMEDGRAPHS.REVISION,NAMEDGRAPHS.UUID,{2} FROM NAMEDGRAPHS WHERE NAMEDGRAPHS.ID={0} AND NAMEDGRAPHS.REVISION > {2} AND ( (NAMEDGRAPHS.HEND IS NULL AND NAMEDGRAPHS.COMMITTED=0) OR (NAMEDGRAPHS.HEND IS NOT NULL AND NAMEDGRAPHS.COMMITTED>0) )
Replication.selectStatementDeletions=SELECT NAMEDGRAPHID,SUBJECT,PREDICATE,OBJECT FROM {0}STMTS_REP_TMP WHERE REND IS NOT NULL ORDER BY NAMEDGRAPHID
Replication.purgeNonChangedNamedGraphNREntries=DELETE FROM {0}NGR_TMP WHERE EXISTS(SELECT NG.REVISION FROM NAMEDGRAPHS_NR NG WHERE NG.ID={0}NGR_TMP.ID AND NG.REVISION={0}NGR_TMP.REVISION AND NG.COMMITTED=0)
Replication.selectStatementAdditions=SELECT NAMEDGRAPHID,SUBJECT,PREDICATE,OBJECT FROM {0}STMTS_REP_TMP WHERE REND IS NULL ORDER BY NAMEDGRAPHID
Replication.insertNamedGraphNRNewRevisions=INSERT INTO {1}NGR_TMP (ID,METAID,NEW_REVISION,UUID,REVISION) SELECT NAMEDGRAPHS_NR.ID,NAMEDGRAPHS_NR.METAID,NAMEDGRAPHS_NR.REVISION,NAMEDGRAPHS_NR.UUID,{2} FROM NAMEDGRAPHS_NR WHERE NAMEDGRAPHS_NR.ID={0} AND NAMEDGRAPHS_NR.REVISION > {2} AND NAMEDGRAPHS_NR.COMMITTED=0
Replication.selectNamedGraphs=SELECT ID,UUID,NEW_REVISION FROM {0}NGR_TMP WHERE REVISION IS NULL OR REVISION < NEW_REVISION
Replication.purgeExtraStatements=DELETE FROM {0}STMTS_REP_TMP WHERE {0}STMTS_REP_TMP.REND IS NOT NULL AND EXISTS (SELECT ST2.ID FROM {0}STMTS_REP_TMP ST2 WHERE ST2.ID={0}STMTS_REP_TMP.ID AND (ST2.REND IS NULL OR ST2.REND>{0}STMTS_REP_TMP.REND))
InsertStatements.commitTransactionAddStatementsNR=UPDATE STATEMENTS_NR SET COMMITTED=0 WHERE COMMITTED=?
InsertStatements.abortTransactionAlreadyAddedStatements=DELETE FROM STATEMENTS WHERE ID IN (SELECT {0}STMT_ID_TMP.ID FROM {0}STMT_ID_TMP) AND COMMITTED=0 AND REND IS NULL
InsertStatements.abortTransactionAddStatementsNRRange=DELETE FROM STATEMENTS_NR WHERE COMMITTED=? AND STATEMENTS.ID IN (SELECT ST.ID FROM {0}STMT_ID_TMP ST WHERE ST.STMTID>=? AND ST.STMTID < ? )
InsertStatements.selectInsertStatements=SELECT ST.STMTID, ST.OPERATION FROM {0}STMTS_TMP ST
InsertStatements.commitInsertStatementsRange=INSERT INTO STATEMENTS(ID,METADATA,UUID,NAMEDGRAPHID,SUBJECT,PREDICATE,OBJECT,RSTART,COMMITTED) SELECT {0}STMTS_TMP.ID, {0}STMTS_TMP.METADATA, {0}STMTS_TMP.UUID, {0}STMTS_TMP.NAMEDGRAPHID, {0}STMTS_TMP.SUBJECT, {0}STMTS_TMP.PREDICATE, {0}STMTS_TMP.OBJECT, {0}STMTS_TMP.REVISION, {0}STMTS_TMP.COMMITTED FROM {0}STMTS_TMP WHERE {0}STMTS_TMP.STMTID >= ? AND {0}STMTS_TMP.STMTID < ? AND {0}STMTS_TMP.OPERATION=1
InsertStatements.abortTransactionRemoveStatements=UPDATE STATEMENTS SET REND=CAST(NULL AS {0}),COMMITTED=0 WHERE COMMITTED=?
InsertStatements.commitInsertStatementsNRRange=INSERT INTO STATEMENTS_NR(ID,METADATA,NAMEDGRAPHID,SUBJECT,PREDICATE,OBJECT,COMMITTED) SELECT {0}STMTS_TMP.ID, {0}STMTS_TMP.METADATA, {0}STMTS_TMP.NAMEDGRAPHID, {0}STMTS_TMP.SUBJECT, {0}STMTS_TMP.PREDICATE, {0}STMTS_TMP.OBJECT, {0}STMTS_TMP.COMMITTED FROM {0}STMTS_TMP WHERE {0}STMTS_TMP.STMTID >= ? AND {0}STMTS_TMP.STMTID < ? AND {0}STMTS_TMP.OPERATION=1
InsertStatements.purgeInsertStatements=DELETE FROM {0}STMTS_TMP WHERE {0}STMTS_TMP.OPERATION=1 AND EXISTS (SELECT S.ID FROM STATEMENTS S WHERE S.ID={0}STMTS_TMP.ID AND S.COMMITTED=0 AND S.REND IS NULL)
InsertStatements.abortTransactionAddNamedGraphs=DELETE FROM NAMEDGRAPHS WHERE COMMITTED=?
InsertStatements.commitTransactionAddNamedGraphsNR=UPDATE NAMEDGRAPHS_NR SET COMMITTED=0 WHERE COMMITTED=?
InsertStatements.abortTransactionRemoveStatementsNRRange=UPDATE STATEMENTS_NR SET COMMITTED=0 WHERE COMMITTED=? AND STATEMENTS.ID IN (SELECT ST.ID FROM {0}STMT_ID_TMP ST WHERE ST.STMTID>=? AND ST.STMTID < ?)
InsertStatements.commitTransactionRemoveStatementsNRRange=DELETE FROM STATEMENTS_NR WHERE COMMITTED=? AND STATEMENTS_NR.ID IN (SELECT ST.ID FROM {0}STMT_ID_TMP ST WHERE ST.STMTID>=? AND ST.STMTID < ?)
InsertStatements.abortTransactionAddNamedGraphsNR=DELETE FROM NAMEDGRAPHS_NR WHERE COMMITTED=?
InsertStatements.commitRemoveStatements=UPDATE STATEMENTS SET COMMITTED=?, REND=ST.REVISION FROM {0}STMTS_TMP ST WHERE STATEMENTS.COMMITTED=0 AND REND IS NULL AND ST.OPERATION=0 AND ST.ID=STATEMENTS.ID
InsertStatements.abortTransactionRemoveNamedGraphs=UPDATE NAMEDGRAPHS SET HEND=CAST(NULL AS {0}),COMMITTED=0 WHERE COMMITTED=?
InsertStatements.commitTransactionStatements=UPDATE STATEMENTS SET COMMITTED=0 WHERE COMMITTED=?
InsertStatements.commitRemoveStatementsRange=UPDATE STATEMENTS SET COMMITTED=?, REND=ST.REVISION FROM {0}STMTS_TMP ST WHERE STATEMENTS.COMMITTED=0 AND STATEMENTS.REND IS NULL AND ST.STMTID >= ? AND ST.STMTID < ? AND ST.OPERATION=0 AND ST.ID=STATEMENTS.ID
InsertStatements.countRemoveStatements=SELECT COUNT(1) FROM {0}STMTS_TMP WHERE OPERATION=0
InsertStatements.commitInsertStatements=INSERT INTO STATEMENTS(ID,METADATA,UUID,NAMEDGRAPHID,SUBJECT,PREDICATE,OBJECT,RSTART,COMMITTED) SELECT {0}STMTS_TMP.ID, {0}STMTS_TMP.METADATA, {0}STMTS_TMP.UUID, {0}STMTS_TMP.NAMEDGRAPHID, {0}STMTS_TMP.SUBJECT, {0}STMTS_TMP.PREDICATE, {0}STMTS_TMP.OBJECT, {0}STMTS_TMP.REVISION, {0}STMTS_TMP.COMMITTED FROM {0}STMTS_TMP WHERE {0}STMTS_TMP.OPERATION=1
InsertStatements.abortTransactionAddStatements=DELETE FROM STATEMENTS WHERE COMMITTED=?
InsertStatements.countInsertStatements=SELECT COUNT(1) FROM {0}STMTS_TMP WHERE OPERATION=1
InsertStatements.commitTransactionStatementsRange=UPDATE STATEMENTS SET COMMITTED=0 FROM {0}STMT_ID_TMP ST WHERE STATEMENTS.COMMITTED=? AND ST.STMTID>=? AND ST.STMTID < ? AND ST.ID=STATEMENTS.ID
InsertStatements.abortTransactionAddStatementsNR=DELETE FROM STATEMENTS_NR WHERE COMMITTED=?
InsertStatements.commitStatementIds=INSERT INTO {0}STMT_ID_TMP(ID,STMTID) SELECT DISTINCT {0}STMTS_TMP.ID, {0}STMTS_TMP.STMTID FROM {0}STMTS_TMP
InsertStatements.abortTransactionAlreadyAddedStatementsNR=DELETE FROM STATEMENTS_NR WHERE ID IN (SELECT {0}STMT_ID_TMP.ID FROM {0}STMT_ID_TMP)
InsertStatements.getTempTablespaceDefined=SELECT COUNT(1) FROM SYSIBM.SYSTABLESPACES WHERE TBSPACE=''USR_TBSP''
InsertStatements.abortTransactionRemoveNamedGraphsNR=UPDATE NAMEDGRAPHS_NR SET COMMITTED=0 WHERE COMMITTED=?
InsertStatements.abortTransactionAddStatementsRange=DELETE FROM STATEMENTS WHERE COMMITTED=? AND STATEMENTS.ID IN (SELECT ST.ID FROM {0}STMT_ID_TMP ST WHERE ST.STMTID>=? AND ST.STMTID < ?)
InsertStatements.commitInsertStatementsNR=INSERT INTO STATEMENTS_NR(ID,METADATA,NAMEDGRAPHID,SUBJECT,PREDICATE,OBJECT,COMMITTED) SELECT {0}STMTS_TMP.ID, {0}STMTS_TMP.METADATA, {0}STMTS_TMP.NAMEDGRAPHID, {0}STMTS_TMP.SUBJECT, {0}STMTS_TMP.PREDICATE, {0}STMTS_TMP.OBJECT, {0}STMTS_TMP.COMMITTED FROM {0}STMTS_TMP WHERE {0}STMTS_TMP.OPERATION=1
InsertStatements.commitRemoveStatementsNR=UPDATE STATEMENTS_NR SET COMMITTED=? FROM {0}STMTS_TMP ST WHERE ST.ID=STATEMENTS_NR.ID AND ST.OPERATION=0
InsertStatements.purgeRemoveStatementsNR=DELETE FROM {0}STMTS_TMP WHERE {0}STMTS_TMP.OPERATION=0 AND NOT EXISTS (SELECT S.ID FROM STATEMENTS_NR S WHERE S.ID={0}STMTS_TMP.ID AND S.COMMITTED=0)
InsertStatements.commitTransactionNamedGraphs=UPDATE NAMEDGRAPHS SET COMMITTED=0 WHERE COMMITTED=?
InsertStatements.purgeInsertStatementsNR=DELETE FROM {0}STMTS_TMP WHERE {0}STMTS_TMP.OPERATION=1 AND EXISTS (SELECT S.ID FROM STATEMENTS_NR S WHERE S.ID={0}STMTS_TMP.ID AND S.COMMITTED=0)
InsertStatements.commitRemoveStatementsNRRange=UPDATE STATEMENTS_NR SET COMMITTED=? FROM FROM {0}STMTS_TMP ST WHERE ST.STMTID >= ? AND ST.STMTID < ? AND ST.OPERATION=0 AND ST.ID=STATEMENTS_NR.ID
InsertStatements.insertTempStatement=INSERT INTO {0}STMTS_TMP(OPERATION,STMTID,ID,METADATA,UUID,NAMEDGRAPHID,SUBJECT,PREDICATE,OBJECT,REVISION,COMMITTED) VALUES(?,?,?,?,?,?,?,?,?,?,?)
InsertStatements.commitTransactionRemoveNamedGraphsNR=DELETE FROM NAMEDGRAPHS_NR WHERE COMMITTED=?
InsertStatements.commitTransactionAddStatementsNRRange=UPDATE STATEMENTS_NR SET COMMITTED=0 FROM {0}STMT_ID_TMP ST WHERE STATEMENTS_NR.COMMITTED=? AND ST.STMTID>=? AND ST.STMTID < ? AND ST.ID=STATEMENTS_NR.ID
InsertStatements.purgeRemoveStatements=DELETE FROM {0}STMTS_TMP WHERE {0}STMTS_TMP.OPERATION=0 AND NOT EXISTS (SELECT S.ID FROM STATEMENTS S WHERE S.ID={0}STMTS_TMP.ID AND S.COMMITTED=0 AND S.REND IS NULL)
InsertStatements.abortTransactionRemoveStatementsNR=UPDATE STATEMENTS_NR SET COMMITTED=0 WHERE COMMITTED=?
InsertStatements.abortTransactionRemoveStatementsRange=UPDATE STATEMENTS SET REND=CAST(NULL AS {0}),COMMITTED=0 WHERE COMMITTED=? AND ST.ID=STATEMENTS.ID IN (SELECT ST.ID FROM {1}STMT_ID_TMP ST WHERE ST.STMTID>=? AND ST.STMTID < ?)
InsertStatements.commitTransactionRemoveStatementsNR=DELETE FROM STATEMENTS_NR WHERE COMMITTED=?
InsertStatements.purgeInsertRemoveStatements=DELETE FROM {0}STMTS_TMP WHERE {0}STMTS_TMP.OPERATION=0 AND {0}STMTS_TMP.ID IN (SELECT S.ID FROM {0}STMTS_TMP S WHERE S.OPERATION=1)
InsertStatements.selectStatementIds=SELECT MIN(STMTID),MAX(STMTID) FROM {0}STMT_ID_TMP
NamedGraph.getAllRevisionedNamedGraphs=SELECT ID FROM NAMEDGRAPHS WHERE ((HEND IS NULL AND COMMITTED=0) OR (HEND IS NOT NULL AND COMMITTED<0)) UNION SELECT METAID FROM NAMEDGRAPHS WHERE ((HEND IS NULL AND COMMITTED=0) OR (HEND IS NOT NULL AND COMMITTED<0))
NamedGraph.getNamedGraphForUUIDNR=SELECT ID FROM NAMEDGRAPHS_NR WHERE UUID=? AND COMMITTED<=0
NamedGraph.getBatchUUIDForNamedGraphNR=SELECT UUID,ID FROM NAMEDGRAPHS_NR WHERE ID IN (SELECT ID FROM {0}{1}) AND COMMITTED<=0
NamedGraph.deleteNamedGraphBatch=UPDATE NAMEDGRAPHS SET HEND=?,COMMITTED=? WHERE ID IN (SELECT {0}{1}.ID FROM {0}{1} WHERE {0}{1}.TYPE=0) AND HEND IS NULL
NamedGraph.getUUIDForNamedGraphNR=SELECT UUID FROM NAMEDGRAPHS_NR WHERE ID=? AND COMMITTED<=0
NamedGraph.getNamedGraphForUUID=SELECT ID FROM NAMEDGRAPHS WHERE UUID=? AND ((HEND IS NULL AND COMMITTED=0) OR (HEND IS NOT NULL AND COMMITTED<0))
NamedGraph.purgelockedNamedGraph=DELETE FROM LOCKED_GRAPHS WHERE TRANSACTIONID=?
NamedGraph.getBatchUUIDForNamedGraph=SELECT UUID,ID FROM NAMEDGRAPHS WHERE ID IN (SELECT ID FROM {0}{1}) AND ((HEND IS NULL AND COMMITTED=0) OR (HEND IS NOT NULL AND COMMITTED<0))
NamedGraph.getUUIDForNamedGraph=SELECT UUID FROM NAMEDGRAPHS WHERE ID=? AND ((HEND IS NULL AND COMMITTED=0) OR (HEND IS NOT NULL AND COMMITTED<0))
NamedGraph.containsMetadataGraphNRAtRevision=SELECT ID FROM NAMEDGRAPHS_NR WHERE METAID=? AND REVISION=?
NamedGraph.selectNamedGraphRevision=SELECT SUBJECT,PREDICATE,OBJECT,NAMEDGRAPHID FROM STATEMENTS S WHERE S.UUID=? AND COMMITTED=0 AND S.RSTART<=? AND (S.REND IS NULL OR S.REND>?)
NamedGraph.deleteStatementsForNamedGraph=UPDATE STATEMENTS SET REND=? WHERE REND IS NULL AND (NAMEDGRAPHID = ? OR NAMEDGRAPHID = ?)
NamedGraph.selectNamedGraphNonRevisionedBatch=SELECT ID,METAID,UUID,REVISION,HSTART,LASTMODIFIEDBY FROM NAMEDGRAPHS_NR WHERE ID IN (SELECT ID FROM {0}{1}) AND COMMITTED<=0
NamedGraph.countAllRevisionedNamedGraphs=SELECT COUNT(1) FROM NAMEDGRAPHS WHERE ((HEND IS NULL AND COMMITTED=0) OR (HEND IS NOT NULL AND COMMITTED<0))
NamedGraph.selectNamedGraphNonRevisioned=SELECT ID,METAID,UUID,REVISION,HSTART,LASTMODIFIEDBY FROM NAMEDGRAPHS_NR WHERE ID = ? AND COMMITTED<=0
NamedGraph.selectNamedGraphSizeNonRevisioned=SELECT DISTINCT COUNT(1) FROM STATEMENTS_NR SH WHERE SH.NAMEDGRAPHID = ? AND SH.COMMITTED<=0
NamedGraph.insertNamedGraph=INSERT INTO NAMEDGRAPHS (HSTART, ID, METAID,UUID,REVISION,LASTMODIFIEDBY,COMMITTED) VALUES (?, ?, ?,?, ?,?,?)
NamedGraph.purgeNamedGraph=DELTE FROM NAMEDGRAPHS WHERE WHERE ID = ?
NamedGraph.updateNamedGraphNR=UPDATE NAMEDGRAPHS_NR SET COMMITTED=? WHERE ID = ?
NamedGraph.deleteNamedGraphNRBatch=UPDATE NAMEDGRAPHS_NR SET COMMITTED=? WHERE ID IN (SELECT {0}{1}.ID FROM {0}{1} WHERE {0}{1}.TYPE=1)
NamedGraph.lockNamedGraph=INSERT INTO LOCKED_GRAPHS(ID,TRANSACTIONID) VALUES (?,?)
NamedGraph.unlockNamedGraph=DELETE FROM LOCKED_GRAPHS WHERE ID=? AND TRANSACTIONID=?
NamedGraph.containsNamedGraphNonRevisioned=SELECT ID FROM NAMEDGRAPHS_NR WHERE ID = ?
NamedGraph.getBatchNamedGraphForUUIDNR=SELECT UUID,ID FROM NAMEDGRAPHS_NR WHERE UUID IN (SELECT ID FROM {0}{1}) AND COMMITTED<=0
NamedGraph.containsNamedGraphNRAtRevision=SELECT ID FROM NAMEDGRAPHS_NR WHERE ID = ? AND REVISION=?
NamedGraph.containsNamedGraphAtRevision=SELECT ID FROM NAMEDGRAPHS WHERE UUID=? AND REVISION=? AND COMMITTED<=0
NamedGraph.insertIdsIntoTempTable=INSERT INTO {0}{1} VALUES (?)
NamedGraph.insertRemovedGraph=INSERT INTO {0}{1}(ID,TYPE,REND) VALUES (?,?,?)
NamedGraph.selectNamedGraphRevisioned=SELECT ID,METAID,UUID,REVISION,HSTART,LASTMODIFIEDBY FROM NAMEDGRAPHS WHERE ID = ? AND ((HEND IS NULL AND COMMITTED=0) OR (HEND IS NOT NULL AND COMMITTED<0))
NamedGraph.deleteNamedGraph=UPDATE NAMEDGRAPHS SET HEND=?,COMMITTED=? WHERE ID = ? AND HEND IS NULL
NamedGraph.getBatchNamedGraphForUUID=SELECT UUID,ID FROM NAMEDGRAPHS WHERE UUID IN (SELECT ID FROM {0}{1}) AND ((HEND IS NULL AND COMMITTED=0) OR (HEND IS NOT NULL AND COMMITTED<0))
NamedGraph.deleteStatementsForNamedGraphNRBatch=DELETE FROM STATEMENTS_NR WHERE NAMEDGRAPHID IN (SELECT {0}{1}.ID FROM {0}{1} WHERE {0}{1}.TYPE=1)
NamedGraph.selectNamedGraphSize=SELECT DISTINCT COUNT(1) FROM STATEMENTS SH WHERE SH.NAMEDGRAPHID = ? AND ((SH.HEND IS NULL AND SH.COMMITTED=0) OR (SH.HEND IS NOT NULL AND SH.COMMITTED<0))
NamedGraph.deleteStatementsForNamedGraphNR=DELETE FROM STATEMENTS_NR WHERE NAMEDGRAPHID = ? OR NAMEDGRAPHID = ?
NamedGraph.countAllNonRevisionedNamedGraphs=SELECT COUNT(1) FROM NAMEDGRAPHS_NR WHERE COMMITTED<=0
NamedGraph.containsMetadataGraphRevisioned=SELECT ID FROM NAMEDGRAPHS WHERE METAID=? AND HEND IS NULL AND COMMITTED=0
NamedGraph.selectNamedGraphRevisionedBatch=SELECT ID,METAID,UUID,REVISION,HSTART,LASTMODIFIEDBY FROM NAMEDGRAPHS WHERE ID IN (SELECT ID FROM {0}{1}) AND ((HEND IS NULL AND COMMITTED=0) OR (HEND IS NOT NULL AND COMMITTED<0))
NamedGraph.getAllNonRevisionedNamedGraphs=SELECT ID FROM NAMEDGRAPHS_NR WHERE COMMITTED<=0 UNION SELECT METAID FROM NAMEDGRAPHS_NR WHERE COMMITTED<=0
NamedGraph.containsNamedGraphRevisioned=SELECT ID FROM NAMEDGRAPHS WHERE ID = ? AND HEND IS NULL AND COMMITTED=0
NamedGraph.insertNamedGraphNR=INSERT INTO NAMEDGRAPHS_NR (HSTART, ID, METAID,UUID, REVISION,LASTMODIFIEDBY,COMMITTED) VALUES (?, ?,?,?,?,?,?)
NamedGraph.purgeStatementsForNamedGraph=DELETE FROM STATEMENTS WHERE NAMEDGRAPHID = ? OR NAMEDGRAPHID = ?
NamedGraph.deleteNamedGraphNR=UPDATE NAMEDGRAPHS_NR SET COMMITTED=? WHERE ID = ?
NamedGraph.containsMetadataGraphNonRevisioned=SELECT ID FROM NAMEDGRAPHS_NR WHERE METAID=?
NamedGraph.deleteStatementsForNamedGraphBatch=UPDATE STATEMENTS SET REND={0}{1}.REND FROM {0}{1} WHERE WHERE STATEMENTS.REND IS NULL AND {0}{1}.TYPE=0 AND {0}{1}.ID=STATEMENTS.NAMEDGRAPHID
Statement.findLiteralStatementsLimitOffset=SELECT NAMEDGRAPHID, SUBJECT, PREDICATE, OBJECT FROM STATEMENTS WHERE COMMITTED=0 AND REND IS NULL AND OBJECT > 2305843009213693953 and OBJECT < 6917529027641081855 ORDER BY NAMEDGRAPHID ASC LIMIT ? OFFSET ?
Statement.findLiteralStatements=SELECT NAMEDGRAPHID, SUBJECT, PREDICATE, OBJECT FROM ALL_STMTS_VIEW WHERE OBJECT > 2305843009213693953 and OBJECT < 6917529027641081855
Statement.findLiteralStatementsNRLimitOffset=SELECT NAMEDGRAPHID, SUBJECT, PREDICATE, OBJECT FROM STATEMENTS_NR WHERE COMMITTED=0 AND OBJECT > 2305843009213693953 and OBJECT < 6917529027641081855 ORDER BY NAMEDGRAPHID ASC LIMIT ? OFFSET ?
Statement.insertStatementNR=INSERT INTO STATEMENTS_NR(ID,METADATA,NAMEDGRAPHID, SUBJECT, PREDICATE, OBJECT,COMMITTED) VALUES (?, ?,?, ?, ?, ?,0)
Statement.insertStatement=INSERT INTO STATEMENTS(ID,METADATA,UUID,NAMEDGRAPHID, SUBJECT, PREDICATE, OBJECT,RSTART,COMMITTED) VALUES (?,?,?,?, ?, ?, ?, ?,0)
Statement.deleteStatementNR=DELETE FROM STATEMENTS_NR WHERE ID=?
Statement.findLiteralStatementsRange=SELECT NAMEDGRAPHID, SUBJECT, PREDICATE, OBJECT FROM STATEMENTS WHERE COMMITTED=0 AND REND IS NULL AND OBJECT > ? and OBJECT < ?
Statement.countStatements=SELECT COUNT(1) FROM STATEMENTS WHERE ((REND IS NULL AND COMMITTED=0) OR (REND IS NOT NULL AND COMMITTED<0))
Statement.deleteStatement=UPDATE STATEMENTS SET REND=? WHERE ID=?
Statement.findMinMaxId=SELECT MIN(ID),MAX(ID) FROM {0}
Statement.resolveDataset=SELECT PREDICATE,OBJECT FROM STATEMENTS WHERE ((REND IS NULL AND COMMITTED=0) OR (REND IS NOT NULL AND COMMITTED<0)) AND PREDICATE IN ({0},{1},{2}) AND SUBJECT = ? AND NAMEDGRAPHID = ?
Statement.findLiteralStatementsLimited=SELECT NAMEDGRAPHID, SUBJECT, PREDICATE, OBJECT FROM( SELECT ROW_NUMBER() OVER (ORDER BY NAMEDGRAPHID) AS ROWNUM,NAMEDGRAPHID, SUBJECT, PREDICATE, OBJECT FROM STATEMENTS WHERE COMMITTED=0 AND REND IS NULL AND OBJECT > 2305843009213693953 and OBJECT < 6917529027641081855) AS FOO WHERE ROWNUM > ? AND ROWNUM<= ?
Statement.findLiteralStatementsNRLimited=SELECT NAMEDGRAPHID, SUBJECT, PREDICATE, OBJECT FROM( SELECT ROW_NUMBER() OVER (ORDER BY NAMEDGRAPHID) AS ROWNUM,NAMEDGRAPHID, SUBJECT, PREDICATE, OBJECT FROM STATEMENTS_NR WHERE COMMITTED=0 AND OBJECT > 2305843009213693953 and OBJECT < 6917529027641081855) AS FOO WHERE ROWNUM > ? AND ROWNUM<= ?
Statement.countStatementsNR=SELECT COUNT(1) FROM STATEMENTS_NR WHERE COMMITTED <=0
Statement.findLiteralStatementsNRRange=SELECT NAMEDGRAPHID, SUBJECT, PREDICATE, OBJECT FROM STATEMENTS_NR WHERE COMMITTED=0 AND OBJECT > ? and OBJECT < ?
Statement.selectStatementId=SELECT S.ID FROM STATEMENTS S WHERE SUBJECT = ? AND PREDICATE = ? AND OBJECT = ? AND S.NAMEDGRAPHID = ? AND REND IS NULL
Statement.resolveDatasetNR=SELECT PREDICATE,OBJECT FROM STATEMENTS_NR WHERE COMMITTED<=0 AND PREDICATE IN ({0},{1},{2}) AND SUBJECT = ? AND NAMEDGRAPHID = ?
LastTransaction.updateTransaction=UPDATE TRANSACTIONTIME SET COMMITED=? WHERE ID=?
LastTransaction.selectUnactivatedTransactions=SELECT ID FROM TRANSACTIONTIME WHERE SERVERID=? AND COMMITED =0
LastTransaction.selectCurrentTimestamp=SELECT CURRENT_TIMESTAMP as NEWTIME,COMMITED FROM LASTTRANSACTIONTIME
LastTransaction.getLastTransaction=SELECT COMMITED FROM LASTTRANSACTIONTIME WHERE ID=0
LastTransaction.purgeTransactions=DELETE FROM TRANSACTIONTIME WHERE SERVERID=? AND COMMITED=-1
LastTransaction.selectUncommitedTransactions=SELECT ID FROM TRANSACTIONTIME WHERE SERVERID=? AND COMMITED =-1
LastTransaction.getLastTransactionTime=SELECT COMMITED FROM LASTTRANSACTIONTIME
LastTransaction.abortTransactions=DELETE FROM TRANSACTIONTIME WHERE ID= ?
LastTransaction.insertFirstTransactionTime=INSERT INTO LASTTRANSACTIONTIME (ID,COMMITED)VALUES(0,?)
LastTransaction.insertLastTransactionTime=UPDATE LASTTRANSACTIONTIME SET COMMITED=? WHERE ID=0
LastTransaction.insertTransaction=INSERT INTO TRANSACTIONTIME (ID,COMMITED,SERVERID,URI,CONTEXT) VALUES(?,-1,?,?,?)
Glitter.insertQueryDataset=INSERT INTO QUERY_GRAPHS (ID,DSID) VALUES(?,?)
Glitter.insertAllMetadataGraphs=INSERT INTO {0}{1} (ID) SELECT DISTINCT NG.METAID FROM NAMEDGRAPHS NG WHERE (COMMITTED=0 AND HEND IS NULL) OR (COMMITTED<0 AND HEND IS NOT NULL) UNION SELECT DISTINCT NG.METAID FROM NAMEDGRAPHS_NR NG WHERE COMMITTED<=0
Glitter.selectNamedGraphs=SELECT {1}{0}.ID FROM {1}{0} WHERE {1}{0}.ID IN (SELECT NG.ID FROM NAMEDGRAPHS NG ((NG.HEND IS NULL AND COMMITTED=0) OR(NG.HEND IS NOT NULL AND COMMITTED <0)))
Glitter.insertGraphSysAdmin=INSERT INTO {0}{1} (ID) VALUES(?)
Glitter.insertGraphsFromQueryDataset=INSERT INTO {0}{1} (ID) SELECT ID FROM QUERY_GRAPHS WHERE DSID=?
Glitter.selectQueryDatasets=SELECT ID,DSID FROM QUERY_GRAPHS ORDER BY DSID
Glitter.containsRevisionedGraph=SELECT COUNT(1) FROM {0}{1} TG,NAMEDGRAPHS NG WHERE TG.ID = ? and (TG.ID=NG.METAID OR TG.ID=NG.ID) AND ((NG.HEND IS NULL AND COMMITTED=0) OR(NG.HEND IS NOT NULL AND COMMITTED <0))
Glitter.datasetPartContainsGraph=SELECT COUNT(1) FROM {0}{1} WHERE ID = ?
Glitter.countValidRevisionedGraphs=SELECT COUNT(1) FROM GLITTERUNIT WHERE EXISTS(SELECT {1}{0}.ID FROM {1}{0},NAMEDGRAPHS NG WHERE (NG.ID ={1}{0}.ID OR NG.METAID={1}{0}.ID) AND ((NG.HEND IS NULL AND COMMITTED=0) OR(NG.HEND IS NOT NULL AND COMMITTED <0)))
Glitter.insertAllValidMetadataGraphs=INSERT INTO {0}{1} (ID) SELECT DISTINCT S.SUBJECT FROM {2} S WHERE S.METADATA = 1 AND S.PREDICATE = {4} AND S.OBJECT IN ({3}) AND S.SUBJECT = S.NAMEDGRAPHID AND S.SUBJECT NOT IN ({5},{6}) AND S.COMMITTED<=0
Glitter.copyDistinctDatasetIds=INSERT INTO {0}{2} SELECT DISTINCT ID FROM {0}{1}
Glitter.insertIdToTempTable=INSERT INTO {0}{1} (ID) VALUES(?)
Glitter.countRows=SELECT COUNT(1) FROM {0}{1}
Glitter.insertValidDatasetGraphs=INSERT INTO {0}{1} (ID) SELECT DISTINCT DS.OBJECT FROM {2} S, {2} DS WHERE DS.NAMEDGRAPHID = {4} AND DS.SUBJECT = {5} AND DS.PREDICATE = {6} AND DS.COMMITTED<=0 AND DS.METADATA=0 AND S.METADATA = 1 AND S.SUBJECT = DS.OBJECT AND S.PREDICATE = {7} AND S.OBJECT IN ({3}) AND S.COMMITTED<=0
Glitter.selectUntimelyGraphs=SELECT TMP1.ID FROM {0}{1} TMP1 LEFT JOIN (SELECT NG.ID FROM NAMEDGRAPHS NG, {0}{2} TMP2 WHERE NG.ID = TMP2.ID AND ? >= NG.HSTART AND (NG.HEND IS NULL OR ? < NG.HEND) )AS TMP2 ON TMP1.ID=TMP2.ID WHERE TMP2.ID IS NULL
Glitter.countValidNonRevisionedGraphsInSet=SELECT COUNT(1) FROM GLITTERUNIT WHERE EXISTS( SELECT NG.ID FROM QUERY_GRAPHS,NAMEDGRAPHS_NR NG WHERE QUERY_GRAPHS.DSID=? AND (NG.ID =QUERY_GRAPHS.ID OR NG.METAID=QUERY_GRAPHS.ID) AND NG.COMMITTED <=0 )
Glitter.insertAllNamedGraphs=INSERT INTO {0}{1} (ID) SELECT DISTINCT NG.ID FROM NAMEDGRAPHS NG WHERE (COMMITTED=0 AND HEND IS NULL) OR (COMMITTED<0 AND HEND IS NOT NULL) UNION SELECT DISTINCT NG.ID FROM NAMEDGRAPHS_NR NG WHERE COMMITTED<=0
Glitter.insertTempDatasetGraph=INSERT INTO {0}TEMPGRAPHS VALUES (?)
Glitter.containsNonRevisionedGraph=SELECT COUNT(1) FROM {0}{1} TG,NAMEDGRAPHS_NR NG WHERE TG.ID = ? and (TG.ID=NG.METAID OR TG.ID=NG.ID) AND COMMITTED <=0
Glitter.insertGraphIfValid=INSERT INTO {0}{1} (ID) SELECT DISTINCT S.SUBJECT FROM {2} S WHERE S.METADATA = 1 AND S.SUBJECT = {4} AND S.PREDICATE = {5} AND S.OBJECT IN ({3}) AND S.COMMITTED<=0
Glitter.insertAllValidNamedGraphs=INSERT INTO {0}{1} (ID) SELECT DISTINCT S.SUBJECT FROM {2} S WHERE S.METADATA = 1 AND S.PREDICATE = {4} AND S.OBJECT IN ({3}) AND S.SUBJECT != S.NAMEDGRAPHID AND S.SUBJECT NOT IN ({5},{6}) AND S.COMMITTED<=0
Glitter.insertAllValidGraphs=INSERT INTO {0}{1} (ID) SELECT DISTINCT S.SUBJECT FROM {2} S WHERE S.METADATA = 1 AND S.PREDICATE = {4} AND S.OBJECT IN ({3}) AND S.SUBJECT NOT IN ({5},{6},{7},{8}) AND S.COMMITTED<=0
Glitter.insertValidDatasetGraphsSysadmin=INSERT INTO {0}{1} (ID) SELECT DISTINCT DS.OBJECT FROM {2} DS WHERE DS.NAMEDGRAPHID = ? AND DS.SUBJECT = ? AND DS.PREDICATE = ? AND DS.COMMITTED<=0 AND DS.METADATA=0
Glitter.countValidNonRevisionedGraphs=SELECT COUNT(1) FROM GLITTERUNIT WHERE EXISTS (SELECT {1}{0}.ID FROM {1}{0},NAMEDGRAPHS_NR NG WHERE (NG.ID ={1}{0}.ID OR NG.METAID={1}{0}.ID) AND NG.COMMITTED<=0)
Glitter.purgeQueryDataset=DELETE FROM QUERY_GRAPHS WHERE DSID=?
Glitter.selectUntimelyMetadataGraphs=SELECT TMP1.ID FROM {0}{1} TMP1 LEFT JOIN (SELECT DISTINCT NG.METAID FROM NAMEDGRAPHS NG, {0}{2} TMP2 WHERE NG.METAID = TMP2.ID AND ? >= NG.HSTART AND (NG.HEND IS NULL OR ? < NG.HEND) )AS TMP2 ON TMP1.ID=TMP2.METAID WHERE TMP2.METAID IS NULL
Glitter.selectMetadataGraphs=SELECT {1}{0}.ID FROM {1}{0} WHERE {1}{0}.ID IN (SELECT NG.METAID FROM NAMEDGRAPHS NG ((NG.HEND IS NULL AND COMMITTED=0) OR(NG.HEND IS NOT NULL AND COMMITTED <0)))
Glitter.selectGraphs=SELECT TG.ID AS GRAPH FROM {0}{1} TG
Glitter.countValidRevisionedGraphsInSet=SELECT COUNT(1) FROM GLITTERUNIT WHERE EXISTS( SELECT NG.ID FROM QUERY_GRAPHS,NAMEDGRAPHS NG WHERE QUERY_GRAPHS.DSID=? AND (NG.ID =QUERY_GRAPHS.ID OR NG.METAID=QUERY_GRAPHS.ID) AND ((NG.HEND IS NULL AND NG.COMMITTED=0) OR(NG.HEND IS NOT NULL AND NG.COMMITTED <0)) )
Backup.purgeNamedGraphNonRevisioned=DELETE FROM NAMEDGRAPHS_NR WHERE ID=?
Backup.selectFullStatements=SELECT ID,UUID,SUBJECT,PREDICATE,OBJECT,NAMEDGRAPHID,RSTART,REND FROM STATEMENTS WHERE PREDICATE=? AND METADATA=1
Backup.purgeNamedGraphStatementsNonRevisioned=DELETE FROM STATEMENTS_NR WHERE (NAMEDGRAPHID=? OR NAMEDGRAPHID=?)
Backup.selectRevisionedGraphUUIDs=SELECT DISTINCT UUID FROM NAMEDGRAPHS WHERE ID=?
Backup.selectStatementsRevisioned=SELECT SUBJECT,PREDICATE,OBJECT,RSTART,REND FROM STATEMENTS WHERE UUID=? AND NAMEDGRAPHID=? ORDER BY (RSTART)
Backup.purgeNamedGraphStatementsRevisioned=DELETE FROM STATEMENTS WHERE (NAMEDGRAPHID=? OR NAMEDGRAPHID=?)
Backup.restoreStatementNR=INSERT INTO STATEMENTS_NR(ID,METADATA,NAMEDGRAPHID, SUBJECT, PREDICATE, OBJECT,COMMITTED) VALUES (?, ?,?, ?, ?, ?,0)
Backup.selectDistinctRevisionedUUIDs=SELECT DISTINCT UUID FROM NAMEDGRAPHS
Backup.restoreNamedGraphNR=INSERT INTO NAMEDGRAPHS_NR (HSTART, ID, METAID,UUID, REVISION,LASTMODIFIEDBY,COMMITTED) VALUES (?, ?,?,?,?,?,0)
Backup.replaceStatementNR=UPDATE STATEMENTS_NR SET STATEMENTS_NR.ID=?, STATEMENTS_NR.OBJECT=? WHERE STATEMENTS_NR.ID=?
Backup.purgeNamedGraphRevisioned=DELETE FROM NAMEDGRAPHS WHERE ID=?
Backup.selectNamedGraphsNonRevisioned=SELECT ID,METAID,REVISION,HSTART,LASTMODIFIEDBY FROM NAMEDGRAPHS_NR WHERE UUID=? ORDER BY REVISION
Backup.selectDistinctNonRevisionedUUIDs=SELECT DISTINCT UUID FROM NAMEDGRAPHS_NR
Backup.replaceStatement=UPDATE STATEMENTS SET STATEMENTS.ID=?, STATEMENTS.OBJECT=? WHERE STATEMENTS.ID=?
Backup.selectStatementsNonRevisioned=SELECT SUBJECT,PREDICATE,OBJECT FROM STATEMENTS_NR WHERE NAMEDGRAPHID=?
Backup.selectFullStatementsNR=SELECT ID,SUBJECT,PREDICATE,OBJECT,NAMEDGRAPHID FROM STATEMENTS_NR WHERE PREDICATE=? AND METADATA=1
Backup.restoreNamedGraph=INSERT INTO NAMEDGRAPHS (HSTART,HEND, ID, METAID,UUID,REVISION,LASTMODIFIEDBY,COMMITTED) VALUES (?,?, ?, ?,?, ?,?,0)
Backup.selectNamedGraphsRevisioned=SELECT ID,METAID,REVISION,HSTART,HEND,LASTMODIFIEDBY FROM NAMEDGRAPHS WHERE UUID=? ORDER BY REVISION 
Backup.selectNonRevisionedGraphUUIDs=SELECT DISTINCT UUID FROM NAMEDGRAPHS_NR WHERE ID=?
Backup.restoreStatement=INSERT INTO STATEMENTS(ID,METADATA,UUID,NAMEDGRAPHID, SUBJECT, PREDICATE, OBJECT,RSTART,REND,COMMITTED) VALUES (?,?,?,?,?,?,?,?,?,0)
Server.getServerId=SELECT ID FROM SERVER
Server.setInitializing=UPDATE SERVER SET INITIALIZED=?
Server.lockTable=LOCK TABLE {0} {1}
Server.stats=VACUUM ANALYZE {0}
Server.getInitialized=SELECT INITIALIZED FROM SERVER
Server.getServerVersion=SELECT VERSION FROM SERVER
Server.unlockTable=
Server.setInitializingFailed=UPDATE SERVER SET INITIALIZED=NULL
Server.setInitialized=UPDATE SERVER SET ID=?,INITIALIZED=1 WHERE INITIALIZED>1
Server.setServerId=UPDATE SERVER SET ID=? WHERE INITIALIZED=1
Server.setServerVersion=UPDATE SERVER SET VERSION=? WHERE INITIALIZED=1
